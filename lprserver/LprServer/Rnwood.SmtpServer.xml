<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LprServer</name>
    </assembly>
    <members>
        <member name="T:LprServer.AbstractSession">
            <summary>
                Provides a base implementation for <see cref="T:LprServer.IEditableSession" />.
            </summary>
            <seealso cref="T:LprServer.IEditableSession" />
        </member>
        <member name="M:LprServer.AbstractSession.#ctor(System.Net.IPAddress,System.DateTime)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.AbstractSession" /> class.
            </summary>
            <param name="clientAddress">The client address.</param>
            <param name="startDate">The start date.</param>
        </member>
        <member name="P:LprServer.AbstractSession.Authenticated">
            <inheritdoc />
        </member>
        <member name="P:LprServer.AbstractSession.AuthenticationCredentials">
            <inheritdoc />
        </member>
        <member name="P:LprServer.AbstractSession.ClientAddress">
            <inheritdoc />
        </member>
        <member name="P:LprServer.AbstractSession.ClientName">
            <inheritdoc />
        </member>
        <member name="P:LprServer.AbstractSession.CompletedNormally">
            <inheritdoc />
        </member>
        <member name="P:LprServer.AbstractSession.EndDate">
            <inheritdoc />
        </member>
        <member name="P:LprServer.AbstractSession.SecureConnection">
            <inheritdoc />
        </member>
        <member name="P:LprServer.AbstractSession.SessionError">
            <inheritdoc />
        </member>
        <member name="P:LprServer.AbstractSession.SessionErrorType">
            <inheritdoc />
        </member>
        <member name="P:LprServer.AbstractSession.StartDate">
            <inheritdoc />
        </member>
        <member name="M:LprServer.AbstractSession.AddMessage(LprServer.IMessage)">
            <inheritdoc />
        </member>
        <member name="M:LprServer.AbstractSession.AppendLineToSessionLog(System.String)">
            <inheritdoc />
        </member>
        <member name="M:LprServer.AbstractSession.IncrementBadCommandCounter">
            <inheritdoc />
        </member>
        <member name="M:LprServer.AbstractSession.ResetBadCommandCounter">
            <inheritdoc />
        </member>
        <member name="M:LprServer.AbstractSession.GetLog">
            <inheritdoc />
        </member>
        <member name="M:LprServer.AbstractSession.GetMessages">
            <inheritdoc />
        </member>
        <member name="P:LprServer.AbstractSession.NumberOfBadCommandsInARow">
            <inheritdoc />
        </member>
        <member name="M:LprServer.AbstractSession.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:LprServer.AbstractSession.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="T:LprServer.ArgumentsParser">
            <summary>
                Parses LPR command arguments into an array of arguments.
                Arguments are separated by spaces or are enclosed within &lt;&gt;s which may contain spaces and balanced &lt;&gt;s.
                Example:
                <code>&lt;Noah Porch&lt;chz160@yahoo.com&gt;&gt; ARG2 ARG3</code>
                Results in 3 arguments.
            </summary>
        </member>
        <member name="M:LprServer.ArgumentsParser.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.ArgumentsParser" /> class.
            </summary>
            <param name="text">The text to parse<see cref="T:System.String" />.</param>
        </member>
        <member name="P:LprServer.ArgumentsParser.Arguments">
            <summary>
                Gets the arguments parsed from the text.
            </summary>
            <value>
                The arguments.
            </value>
        </member>
        <member name="P:LprServer.ArgumentsParser.Text">
            <summary>
                Gets the Text which was parsed.
            </summary>
        </member>
        <member name="T:LprServer.AsciiSevenBitTruncatingEncoding">
            <summary>
                An ASCII encoding where the highest order bit is zeroed.
            </summary>
            <seealso cref="T:System.Text.Encoding" />
        </member>
        <member name="M:LprServer.AsciiSevenBitTruncatingEncoding.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.AsciiSevenBitTruncatingEncoding" /> class.
            </summary>
        </member>
        <member name="M:LprServer.AsciiSevenBitTruncatingEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
            <summary>
                When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from
                the specified character array.
            </summary>
            <param name="chars">The character array containing the set of characters to encode.</param>
            <param name="index">The index of the first character to encode.</param>
            <param name="count">The number of characters to encode.</param>
            <returns>
                The number of bytes produced by encoding the specified characters.
            </returns>
        </member>
        <member name="M:LprServer.AsciiSevenBitTruncatingEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
                When overridden in a derived class, encodes a set of characters from the specified character array into the
                specified byte array.
            </summary>
            <param name="chars">The character array containing the set of characters to encode.</param>
            <param name="charIndex">The index of the first character to encode.</param>
            <param name="charCount">The number of characters to encode.</param>
            <param name="bytes">The byte array to contain the resulting sequence of bytes.</param>
            <param name="byteIndex">The index at which to start writing the resulting sequence of bytes.</param>
            <returns>
                The actual number of bytes written into <paramref name="bytes">bytes</paramref>.
            </returns>
        </member>
        <member name="M:LprnBitTruncatingEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
            <summary>
                When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes
                from the specified byte array.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <param name="index">The index of the first byte to decode.</param>
            <param name="count">The number of bytes to decode.</param>
            <returns>
                The number of characters produced by decoding the specified sequence of bytes.
            </returns>
        </member>
        <member name="M:LprServer.AsciiSevenBitTruncatingEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
                When overridden in a derived class, decodes a sequence of bytes from the specified byte array into the specified
                character array.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <param name="byteIndex">The index of the first byte to decode.</param>
            <param name="byteCount">The number of bytes to decode.</param>
            <param name="chars">The character array to contain the resulting set of characters.</param>
            <param name="charIndex">The index at which to start writing the resulting set of characters.</param>
            <returns>
                The actual number of characters written into <paramref name="chars">chars</paramref>.
            </returns>
        </member>
        <member name="M:LprServer.AsciiSevenBitTruncatingEncoding.GetMaxByteCount(System.Int32)">
            <summary>
                When overridden in a derived class, calculates the maximum number of bytes produced by encoding the specified
                number of characters.
            </summary>
            <param name="charCount">The number of characters to encode.</param>
            <returns>
                The maximum number of bytes produced by encoding the specified number of characters.
            </returns>
        </member>
        <member name="M:LprServer.AsciiSevenBitTruncatingEncoding.GetMaxCharCount(System.Int32)">
            <summary>
                When overridden in a derived class, calculates the maximum number of characters produced by decoding the specified
                number of bytes.
            </summary>
            <param name="byteCount">The number of bytes to decode.</param>
            <returns>
                The maximum number of characters produced by decoding the specified number of bytes.
            </returns>
        </member>
        <member name="P:LprServer.AsciiSevenBitTruncatingEncoding.DecodingFallback.MaxCharCount">
            <summary>
                Gets the maximum number of characters the current <see cref="T:System.Text.DecoderFallback"></see> object can return.
            </summary>
        </member>
        <member name="M:LprServer.AsciiSevenBitTruncatingEncoding.DecodingFallback.CreateFallbackBuffer">
            <summary>
                Initializes a new instance of the <see cref="T:System.Text.DecoderFallbackBuffer"></see> class.
            </summary>
            <returns>
                An object that provides a fallback buffer for a decoder.
            </returns>
        </member>
        <member name="T:LprServer.AsyncEventHandler`1">
            <summary>
                Represents an async event handler which accepts an <see cref="T:System.Object" /> parameter and a <typeparamref name="T" />
                parameter and returns a <see cref="T:System.Threading.Tasks.Task" />.
            </summary>
            <typeparam name="T">The type of the second param.</typeparam>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
            <returns>A task representing the async operation.</returns>
        </member>
        <member name="T:LprServer.AuthenticationCredentialsValidationEventArgs">
            <summary>
                Defines the <see cref="T:LprServer.AuthenticationCredentialsValidationEventArgs" />.
            </summary>
        </member>
        <member name="M:LprServer.AuthenticationCredentialsValidationEventArgs.#ctor(LprServer.ISession,LprServer.Extensions.Auth.IAuthenticationCredentials,LprServer.IConnection)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.AuthenticationCredentialsValidationEventArgs" /> class.
            </summary>
            <param name="session">The session</param>
            <param name="credentials">The credentials<see cref="T:LprServer.Extensions.Auth.IAuthenticationCredentials" />.</param>
        </member>
        <member name="P:LprServer.AuthenticationCredentialsValidationEventArgs.Session">
            <summary>
            Gets the session
            </summary>
        </member>
        <member name="P:LprServer.AuthenticationCredentialsValidationEventArgs.AuthenticationResult">
            <summary>
                Gets or sets the AuthenticationResult.
            </summary>
        </member>
        <member name="P:LprServer.AuthenticationCredentialsValidationEventArgs.Credentials">
            <summary>
                Gets the Credentials.
            </summary>
        </member>
        <member name="T:LprServer.BadBase64Exception">
            <summary>
                Defines the <see cref="T:LprServer.BadBase64Exception" />.
            </summary>
        </member>
        <member name="M:LprServer.BadBase64Exception.#ctor(LprServer.SmtpResponse)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.BadBase64Exception" /> class.
            </summary>
            <param name="smtpResponse">The smtpResponse<see cref="T:LprServer.SmtpResponse" />.</param>
        </member>
        <member name="M:LprServer.BadBase64Exception.#ctor(LprServer.SmtpResponse,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.BadBase64Exception" /> class.
            </summary>
            <param name="smtpResponse">The smtpResponse<see cref="T:LprServer.SmtpResponse" />.</param>
            <param name="innerException">The innerException<see cref="T:System.Exception" />.</param>
        </member>
        <member name="M:LprServer.BadBase64Exception.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.BadBase64Exception" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:LprServer.BadBase64Exception.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.BadBase64Exception" /> class.
            </summary>
        </member>
        <member name="M:LprServer.BadBase64Exception.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.BadBase64Exception" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
                The exception that is the cause of the current exception, or a null reference (Nothing in
                Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="T:LprServer.CloseNotifyingMemoryStream">
            <summary>
                Defines the <see cref="T:LprServer.CloseNotifyingMemoryStream" /> which is a memory stream that fires an event when disposed.
            </summary>
        </member>
        <member name="E:LprServer.CloseNotifyingMemoryStream.Closing">
            <summary>
                Occurs when the stream is disposed.
            </summary>
        </member>
        <member name="M:LprServer.CloseNotifyingMemoryStream.Dispose(System.Boolean)">
            <summary>
                Releases the unmanaged resources used by the <see cref="T:System.IO.MemoryStream"></see> class and optionally
                releases the managed resources.
            </summary>
            <param name="disposing">The disposing<see cref="T:System.Boolean" />.</param>
        </member>
        <member name="T:LprServer.CommandEventArgs">
            <summary>
                Defines the <see cref="T:LprServer.CommandEventArgs" />.
            </summary>
        </member>
        <member name="M:LprServer.CommandEventArgs.#ctor(LprServer.SmtpCommand)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.CommandEventArgs" /> class.
            </summary>
            <param name="command">The command<see cref="T:LprServer.SmtpCommand" />.</param>
        </member>
        <member name="P:LprServer.CommandEventArgs.Command">
            <summary>
                Gets the Command.
            </summary>
        </member>
        <member name="T:LprServer.Connection">
            <summary>
                Represents a single LPR server from a client to the server.
            </summary>
        </member>
        <member name="M:LprServer.Connection.#ctor(LprServer.ISmtpServer,LprServer.IEditableSession,LprServer.IConnectionChannel,LprServer.Verbs.IVerbMap,System.Func{LprServer.IConnection,LprServer.Extensions.IExtensionProcessor[]})">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.Connection" /> class.
            </summary>
            <param name="server">The server.</param>
            <param name="session">The session.</param>
            <param name="connectionChannel">The connection channel.</param>
            <param name="verbMap">The verb map.</param>
            <param name="extensionProcessors">The extension processors.</param>
        </member>
        <member name="E:LprServer.Connection.ConnectionClosedEventHandler">
            <inheritdoc />
        </member>
        <member name="P:LprServer.Connection.CurrentMessage">
            <inheritdoc />
        </member>
        <member name="P:LprServer.Connection.MailVerb">
            <inheritdoc />
        </member>
        <member name="P:LprServer.Connection.Server">
            <inheritdoc />
        </member>
        <member name="P:Lpronnection.Session">
            <inheritdoc />
        </member>
        <member name="P:LprServer.Connection.VerbMap">
            <inheritdoc />
        </member>
        <member name="P:LprServer.Connection.ExtensionProcessors">
            <summary>
                Gets a list of extensions which are available for this connection.
            </summary>
        </member>
        <member name="M:LprServer.Connection.AbortMessage">
            <inheritdoc />
        </member>
        <member name="M:LprServer.Connection.ApplyStreamFilter(System.Func{System.IO.Stream,System.Threading.Tasks.Task{System.IO.Stream}})">
            <inheritdoc />
        </member>
        <member name="M:LprServer.Connection.CloseConnection">
            <inheritdoc />
        </member>
        <member name="M:LprServer.Connection.CommitMessage">
            <inheritdoc />
        </member>
        <member name="M:LprServer.Connection.NewMessage">
            <inheritdoc />
        </member>
        <member name="M:LprServer.Connection.ReadLine">
            <inheritdoc />
        </member>
        <member name="M:LprServer.Connection.WriteResponse(LprServer.SmtpResponse)">
            <inheritdoc />
        </member>
        <member name="M:LprServer.Connection.ReadLineBytes">
            <inheritdoc />
        </member>
        <member name="M:LprServer.Connection.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:LprServer.Connection.Create(LprServer.ISmtpServer,LprServer.IConnectionChannel,LprServer.Verbs.IVerbMap)">
            <summary>
                Creates the a connection for the specified server and channel..
            </summary>
            <param name="server">The server.</param>
            <param name="connectionChannel">The connection channel.</param>
            <param name="verbMap">The verb map.</param>
            <returns>An <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.</returns>
        </member>
        <member name="M:LprServer.Connection.StartImplicitTls(System.IO.Stream)">
            <summary>
                Start the Tls stream.
            </summary>
            <param name="s">stream.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:LprServer.Connection.ProcessAsync">
            <summary>
                Starts processing of this connection.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.</returns>
        </member>
        <member name="M:LprServer.Connection.WriteLineAndFlush(System.String,System.Object[])">
            <summary>
                Writes a line of text to the client.
            </summary>
            <param name="text">
                The text<see cref="T:System.String" /> optionally containing placeholders into which <paramref name="args" />
                are subtituted using <see cref="M:System.String.Format(System.String,System.Object[])" />.
            </param>
            <param name="args">The arguments which are formatted into <paramref name="text" />.</param>
            <returns>
                The <see cref="T:System.Threading.Tasks.Task" />.
            </returns>
        </member>
        <member name="T:LprServer.ConnectionEventArgs">
            <summary>
                Defines the <see cref="T:LprServer.ConnectionEventArgs" />.
            </summary>
        </member>
        <member name="M:LprServer.ConnectionEventArgs.#ctor(LprServer.IConnection)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.ConnectionEventArgs" /> class.
            </summary>
            <param name="connection">The connection<see cref="T:LprServer.IConnection" />.</param>
        </member>
        <member name="P:LprServer.ConnectionEventArgs.Connection">
            <summary>
                Gets the Connection.
            </summary>
        </member>
        <member name="T:LprServer.ConnectionUnexpectedlyClosedException">
            <summary>
                Defines the <see cref="T:LprServer.ConnectionUnexpectedlyClosedException" />.
            </summary>
        </member>
        <member name="M:LprServer.ConnectionUnexpectedlyClosedException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.ConnectionUnexpectedlyClosedException" /> class.
            </summary>
        </member>
        <member name="M:LprServer.ConnectionUnexpectedlyClosedException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.ConnectionUnexpectedlyClosedException" /> class.
            </summary>
            <param name="message">The message<see cref="T:System.String" />.</param>
        </member>
        <member name="M:LprServer.ConnectionUnexpectedlyClosedException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.ConnectionUnexpectedlyClosedException" /> class.
            </summary>
            <param name="message">The message<see cref="T:System.String" />.</param>
            <param name="innerException">The innerException<see cref="T:System.Exception" />.</param>
        </member>
        <member name="T:LprServer.CurrentDateTimeProvider">
            <summary>
                Implements <see cref="T:LprServer.ICurrentDateTimeProvider" /> using the real local date time.
            </summary>
            <seealso cref="T:LprServer.ICurrentDateTimeProvider" />
        </member>
        <member name="M:LprteTimeProvider.GetCurrentDateTime">
            <inheritdoc />
        </member>
        <member name="T:LprServer.DataAccessMode">
            <summary>
                Defines the DataAccessMode.
            </summary>
        </member>
        <member name="F:LprServer.DataAccessMode.ForReading">
            <summary>
                Defines the ForReading
            </summary>
        </member>
        <member name="F:LprServer.DataAccessMode.ForWriting">
            <summary>
                Defines the ForWriting
            </summary>
        </member>
        <member name="T:LprServer.Extensions.Auth.AnonymousAuthenticationCredentials">
            <summary>
                Defines the <see cref="T:LprServer.Extensions.Auth.AnonymousAuthenticationCredentials" />.
            </summary>
        </member>
        <member name="P:LprServer.Extensions.Auth.AnonymousAuthenticationCredentials.Type">
            <inheritdoc />
        </member>
        <member name="T:LprServer.Extensions.Auth.AnonymousMechanism">
            <summary>
                Defines the <see cref="T:LprServer.Extensions.Auth.AnonymousMechanism" /> which implements ANONYMOUS authentication.
            </summary>
        </member>
        <member name="P:LprServer.Extensions.Auth.AnonymousMechanism.Identifier">
            <inheritdoc />
        </member>
        <member name="P:LprServer.Extensions.Auth.AnonymousMechanism.IsPlainText">
            <inheritdoc />
        </member>
        <member name="M:LprServer.Extensions.Auth.AnonymousMechanism.CreateAuthMechanismProcessor(LprServer.IConnection)">
            <inheritdoc />
        </member>
        <member name="M:LprServer.Extensions.Auth.AnonymousMechanism.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:LprServer.Extensions.Auth.AnonymousMechanism.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:LprServer.Extensions.Auth.AnonymousMechanismProcessor">
            <summary>
                Defines the <see cref="T:LprServer.Extensions.Auth.AnonymousMechanismProcessor" />.
            </summary>
        </member>
        <member name="M:LprServer.Extensions.Auth.AnonymousMechanismProcessor.#ctor(LprServer.IConnection)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.Extensions.Auth.AnonymousMechanismProcessor" /> class.
            </summary>
            <param name="connection">The connection<see cref="T:LprServer.IConnection" />.</param>
        </member>
        <member name="P:LprServer.Extensions.Auth.AnonymousMechanismProcessor.Connection">
            <summary>
                Gets the connection this processor is for.
            </summary>
            <value>
                The connection.
            </value>
        </member>
        <member name="P:LprServer.Extensions.Auth.AnonymousMechanismProcessor.Credentials">
            <inheritdoc />
        </member>
        <member name="M:LprServer.Extensions.Auth.AnonymousMechanismProcessor.ProcessResponse(System.String)">
            <inheritdoc />
        </member>
        <member name="T:LprServer.Extensions.Auth.AuthExtension">
            <summary>
                Defines the <see cref="T:LprServer.Extensions.Auth.AuthExtension" />.
            </summary>
        </member>
        <member name="M:LprServer.Extensions.Auth.AuthExtension.CreateExtensionProcessor(LprServer.IConnection)">
            <inheritdoc />
        </member>
        <member name="T:LprServer.Extensions.Auth.AuthExtensionProcessor">
            <summary>
                Implements the AUTH extension for a connection.
            </summary>
            <seealso cref="T:LprServer.Extensions.IExtensionProcessor" />
        </member>
        <member name="F:LprServer.Extensions.Auth.AuthExtensionProcessor.connection">
            <summary>
                Defines the connection.
            </summary>
        </member>
        <member name="M:LprServer.Extensions.Auth.AuthExtensionProcessor.#ctor(LprServer.IConnection)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.Extensions.Auth.AuthExtensionProcessor" /> class.
            </summary>
            <param name="connection">The connection<see cref="T:LprServer.IConnection" />.</param>
        </member>
        <member name="P:LprServer.Extensions.Auth.AuthExtensionProcessor.MechanismMap">
            <summary>
                Gets the mechanism map which manages the list of available auth mechanisms.
            </summary>
            <value>
                The mechanism map.
            </value>
        </member>
        <member name="M:LprServer.Extensions.Auth.AuthExtensionProcessor.GetEHLOKeywords">
            <inheritdoc />
        </member>
        <member name="M:LprServer.Extensions.Auth.AuthExtensionProcessor.IsMechanismEnabled(LprServer.Extensions.Auth.IAuthMechanism)">
            <summary>
                Determines whether the specified auth mechanism is enabled for the current connection.
            </summary>
            <param name="mechanism">The mechanism.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation which yields true if enabled.</returns>
        </member>
        <member name="M:LprServer.Extensions.Auth.AuthExtensionProcessor.GetEnabledAuthMechanisms">
            <summary>
                Returns a sequence of all enabled auth mechanisms for the current connection.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.</returns>
        </member>
        <member name="T:LprServer.Extensions.Auth.AuthMechanismMap">
            <summary>
                Defines the <see cref="T:LprServer.Extensions.Auth.AuthMechanismMap" />.
            </summary>
        </member>
        <member name="F:LprServer.Extensions.Auth.AuthMechanismMap.map">
            <summary>
                Defines the map.
            </summary>
        </member>
        <member name="M:LprServer.Extensions.Auth.AuthMechanismMap.Add(LprServer.Extensions.Auth.IAuthMechanism)">
            <summary>
                Adds an auth mechanism to the map.
            </summary>
            <param name="mechanism">The mechanism<see cref="T:LprServer.Extensions.Auth.IAuthMechanism" />.</param>
        </member>
        <member name="M:LprServer.Extensions.Auth.AuthMechanismMap.Get(System.String)">
            <summary>
                Gets the auth mechanism which has been registered for the given identifier.
            </summary>
            <param name="identifier">The identifier<see cref="T:System.String" />.</param>
            <returns>The <see cref="T:LprServer.Extensions.Auth.IAuthMechanism" />.</returns>
        </member>
        <member name="M:LprServer.Extensions.Auth.AuthMechanismMap.GetAll">
            <summary>
                Gets all registered auth mechanisms.
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
        </member>
        <member name="T:LprServer.Extensions.Auth.AuthMechanismProcessor">
            <summary>
                Defines the <see cref="T:LprServer.Extensions.Auth.AuthMechanismProcessor" />.
            </summary>
        </member>
        <member name="M:LprServer.Extensions.Auth.AuthMechanismProcessor.#ctor(LprServer.IConnection)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.Extensions.Auth.AuthMechanismProcessor" /> class.
            </summary>
            <param name="connection">The connection<see cref="T:LprServer.IConnection" />.</param>
        </member>
        <member name="P:LprServer.Extensions.Auth.AuthMechanismProcessor.Connection">
            <summary>
                Gets the connection this processor is for.
            </summary>
            <value>
                The connection.
            </value>
        </member>
        <member name="P:LprServer.Extensions.Auth.AuthMechanismProcessor.Credentials">
            <inheritdoc />
        </member>
        <member name="M:LprServer.Extensions.Auth.AuthMechanismProcessor.ProcessResponse(System.String)">
            <inheritdoc />
        </member>
        <member name="M:LprServer.Extensions.Auth.AuthMechanismProcessor.DecodeBase64(System.String)">
            <summary>
                Decodes a base64 encoded ASCII string and throws an exception if invalid.
            </summary>
            <param name="data">The data.</param>
            <returns>The decoded ASCII string.</returns>
            <exception cref="T:LprServer.BadBase64Exception">If the base64 encoded string is invalid.</exception>
        </member>
        <member name="M:LprServer.Extensions.Auth.AuthMechanismProcessor.EncodeBase64(System.String)">
            <summary>
            Base64 encodes the provided values using ASCII encoding
            </summary>
            <param name="asciiString"></param>
            <returns></returns>
        </member>
        <member name="T:LprServer.Extensions.Auth.AuthMechanismProcessorStatus">
            <summary>
                Defines the AuthMechanismProcessorStatus.
            </summary>
        </member>
        <member name="F:LprServer.Extensions.Auth.AuthMechanismProcessorStatus.Continue">
            <summary>
                Defines the Continue
            </summary>
        </member>
        <member name="F:LprServer.Extensions.Auth.AuthMechanismProcessorStatus.Failed">
            <summary>
                Defines the Failed
            </summary>
        </member>
        <member name="F:LprServer.Extensions.Auth.AuthMechanismProcessorStatus.Success">
            <summary>
                Defines the Success
            </summary>
        </member>
        <member name="T:LprServer.Extensions.Auth.AuthMechanisms">
            <summary>
                Authentication Mechanisms.
            </summary>
        </member>
        <member name="M:LprServer.Extensions.Auth.AuthMechanisms.All">
            <summary>
                Return enumerable of all valid Auth Mechanisms.
            </summary>
            <returns>Enumerable collection of AuthMechanisms.</returns>
        </member>
        <member name="T:LprServer.Extensions.Auth.AuthVerb">
            <summary>
                Defines the <see cref="T:LprServer.Extensions.Auth.AuthVerb" />.
            </summary>
        </member>
        <member name="M:LprServer.Extensions.Auth.AuthVerb.#ctor(LprServer.Extensions.Auth.AuthExtensionProcessor)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.Extensions.Auth.AuthVerb" /> class.
            </summary>
            <param name="authExtensionProcessor">The authExtensionProcessor<see cref="P:LprServer.Extensions.Auth.AuthVerb.AuthExtensionProcessor" />.</param>
        </member>
        <member name="P:LprServer.Extensions.Auth.AuthVerb.AuthExtensionProcessor">
            <summary>
                Gets the AuthExtensionProcessor.
            </summary>
        </member>
        <member name="M:LprServer.Extensions.Auth.AuthVerb.Process(LprServer.IConnection,LprServer.SmtpCommand)">
            <inheritdoc />
        </member>
        <member name="T:LprServer.Extensions.Auth.CramMd5AuthenticationCredentials">
            <summary>
                Defines the <see cref="T:LprServer.Extensions.Auth.CramMd5AuthenticationCredentials" />.
            </summary>
        </member>
        <member name="M:LprServer.Extensions.Auth.CramMd5AuthenticationCredentials.#ctor(System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.Extensions.Auth.CramMd5AuthenticationCredentials" /> class.
            </summary>
            <param name="username">The username<see cref="T:System.String" />.</param>
            <param name="challenge">The challenge<see cref="T:System.String" />.</param>
            <param name="challengeResponse">The challengeResponse<see cref="T:System.String" />.</param>
        </member>
        <member name="P:LprServer.Extensions.Auth.CramMd5AuthenticationCredentials.Challenge">
            <summary>
                Gets the Challenge.
            </summary>
        </member>
        <member name="P:LprServer.Extensions.Auth.CramMd5AuthenticationCredentials.ChallengeResponse">
            <summary>
                Gets the ChallengeResponse.
            </summary>
        </member>
        <member name="P:LprServer.Extensions.Auth.CramMd5AuthenticationCredentials.Username">
            <summary>
                Gets the Username.
            </summary>
        </member>
        <member name="M:LprServer.Extensions.Auth.CramMd5AuthenticationCredentials.ValidateResponse(System.String)">
            <summary>
                Validates the response sent by the client against a password specified in clear text.
            </summary>
            <param name="password">The password<see cref="T:System.String" />.</param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="P:LprServer.Extensions.Auth.CramMd5AuthenticationCredentials.Type">
            <inheritdoc />
        </member>
        <member name="T:LprServer.Extensions.Auth.CramMd5Mechanism">
            <summary>
                Defines the <see cref="T:LprServer.Extensions.Auth.CramMd5Mechanism" /> implementing the CRAM-MD5 auth mechanism.
            </summary>
        </member>
        <member name="P:LprServer.Extensions.Auth.CramMd5Mechanism.Identifier">
            <inheritdoc />
        </member>
        <member name="P:LprServer.Extensions.Auth.CramMd5Mechanism.IsPlainText">
            <inheritdoc />
        </member>
        <member name="M:LprServer.Extensions.Auth.CramMd5Mechanism.CreateAuthMechanismProcessor(LprServer.IConnection)">
            <inheritdoc />
        </member>
        <member name="M:LprServer.Extensions.Auth.CramMd5Mechanism.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:LprServer.Extensions.Auth.CramMd5Mechanism.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:LprServer.Extensions.Auth.CramMd5MechanismProcessor">
            <summary>
                Defines the <see cref="T:LprServer.Extensions.Auth.CramMd5MechanismProcessor" />.
            </summary>
        </member>
        <member name="F:LprServer.Extensions.Auth.CramMd5MechanismProcessor.dateTimeProvider">
            <summary>
                Defines the dateTimeProvider.
            </summary>
        </member>
        <member name="F:LprServer.Extensions.Auth.CramMd5MechanismProcessor.random">
            <summary>
                Defines the random.
            </summary>
        </member>
        <member name="F:LprServer.Extensions.Auth.CramMd5MechanismProcessor.challenge">
            <summary>
                Defines the challenge.
            </summary>
        </member>
        <member name="M:LprServer.Extensions.Auth.CramMd5MechanismProcessor.#ctor(LprServer.IConnection,LprServer.IRandomIntegerGenerator,LprServer.ICurrentDateTimeProvider)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.Extensions.Auth.CramMd5MechanismProcessor" /> class.
            </summary>
            <param name="connection">The connection<see cref="T:LprServer.IConnection" />.</param>
            <param name="random">The random<see cref="T:LprServer.IRandomIntegerGenerator" />.</param>
            <param name="dateTimeProvider">The dateTimeProvider<see cref="T:LprServer.ICurrentDateTimeProvider" />.</param>
        </member>
        <member name="M:LprServer.Extensions.Auth.CramMd5MechanismProcessor.#ctor(LprServer.IConnection,LprServer.IRandomIntegerGenerator,LprServer.ICurrentDateTimeProvider,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.Extensions.Auth.CramMd5MechanismProcessor" /> class.
            </summary>
            <param name="connection">The connection<see cref="T:LprServer.IConnection" />.</param>
            <param name="random">The random<see cref="T:LprServer.IRandomIntegerGenerator" />.</param>
            <param name="dateTimeProvider">The dateTimeProvider<see cref="T:LprServer.ICurrentDateTimeProvider" />.</param>
            <param name="challenge">The challenge<see cref="T:System.String" />.</param>
        </member>
        <member name="M:LprServer.Extensions.Auth.CramMd5MechanismProcessor.ProcessResponse(System.String)">
            <inheritdoc />
        </member>
        <member name="T:LprServer.Extensions.Auth.IAuthenticationCredentials">
            <summary>
                Represents credentials supplied by the client.
            </summary>
        </member>
        <member name="P:LprServer.Extensions.Auth.IAuthenticationCredentials.Type">
            <summary>
            Gets a string representing the type of this credential.
            </summary>
        </member>
        <member name="T:LprServer.Extensions.Auth.IAuthenticationCredentialsCanValidateWithPassword">
            <summary>
            Represents auth credentials that have a username and which can be validated by the server using the clear text password.
            </summary>
        </member>
        <member name="P:LprServer.Extensions.Auth.IAuthenticationCredentialsCanValidateWithPassword.Username">
            <summary>
            The username
            </summary>
        </member>
        <member name="M:LprServer.Extensions.Auth.IAuthenticationCredentialsCanValidateWithPassword.ValidateResponse(System.String)">
            <summary>
            Checks the response using clear text password.
            </summary>
            <param name="password"></param>
            <returns>True if response matches the password.</returns>
        </member>
        <member name="T:LprServer.Extensions.Auth.IAuthMechanism">
            <summary>
                Defines the <see cref="T:LprServer.Extensions.Auth.IAuthMechanism" /> which implements a single authentication mechansim for the server.
            </summary>
        </member>
        <member name="P:LprServer.Extensions.Auth.IAuthMechanism.Identifier">
            <summary>
                Gets the identifier for this AUTH mechanism as declared by the server in the EHELO response.
            </summary>
        </member>
        <member name="P:LprServer.Extensions.Auth.IAuthMechanism.IsPlainText">
            <summary>
                Gets a value indicating whether credentials are sent using plain text.
            </summary>
        </member>
        <member name="M:LprServer.Extensions.Auth.IAuthMechanism.CreateAuthMechanismProcessor(LprServer.IConnection)">
            <summary>
                Creates an authentication mechanism processor for the provided connection.
            </summary>
            <param name="connection">The connection<see cref="T:LprServer.IConnection" />.</param>
            <returns>
                The <see cref="T:LprServer.Extensions.Auth.IAuthMechanismProcessor" />.
            </returns>
        </member>
        <member name="T:LprServer.Extensions.Auth.IAuthMechanismProcessor">
            <summary>
                Defines the <see cref="T:LprServer.Extensions.Auth.IAuthMechanismProcessor" /> which implements the state machine for a particular auth
                mechnism for a single client connection.
            </summary>
        </member>
        <member name="P:LprServer.Extensions.Auth.IAuthMechanismProcessor.Credentials">
            <summary>
                Gets the Credentials supplied during this authentication.
            </summary>
        </member>
        <member name="M:LprServer.Extensions.Auth.IAuthMechanismProcessor.ProcessResponse(System.String)">
            <summary>
                Processes a response from the client and returns the result of the auth operation.
            </summary>
            <param name="data">The data<see cref="T:System.String" />.</param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.
            </returns>
        </member>
        <member name="T:LprServer.Extensions.Auth.LoginAuthenticationCredentials">
            <summary>
                Defines the <see cref="T:LprServer.Extensions.Auth.LoginAuthenticationCredentials" />.
            </summary>
        </member>
        <member name="M:LprServer.Extensions.Auth.LoginAuthenticationCredentials.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.Extensions.Auth.LoginAuthenticationCredentials" /> class.
            </summary>
            <param name="username">The username<see cref="T:System.String" />.</param>
            <param name="password">The password<see cref="T:System.String" />.</param>
        </member>
        <member name="T:LprServer.Extensions.Auth.LoginMechanism">
            <summary>
                Defines the <see cref="T:LprServer.Extensions.Auth.LoginMechanism" /> implementing the plain text LOGIN auth mechanism.
            </summary>
        </member>
        <member name="P:LprServer.Extensions.Auth.LoginMechanism.Identifier">
            <inheritdoc />
        </member>
        <member name="P:LprServer.Extensions.Auth.LoginMechanism.IsPlainText">
            <inheritdoc />
        </member>
        <member name="M:LprServer.Extensions.Auth.LoginMechanism.CreateAuthMechanismProcessor(LprServer.IConnection)">
            <inheritdoc />
        </member>
        <member name="M:LprServer.Extensions.Auth.LoginMechanism.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:LprServer.Extensions.Auth.LoginMechanism.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:LprServer.Extensions.Auth.LoginMechanismProcessor">
            <summary>
                Defines the <see cref="T:LprServer.Extensions.Auth.LoginMechanismProcessor" />.
            </summary>
        </member>
        <member name="F:LprServer.Extensions.Auth.LoginMechanismProcessor.username">
            <summary>
                Defines the username.
            </summary>
        </member>
        <member name="M:LprServer.Extensions.Auth.LoginMechanismProcessor.#ctor(LprServer.IConnection)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.Extensions.Auth.LoginMechanismProcessor" /> class.
            </summary>
            <param name="connection">The connection<see cref="T:LprServer.IConnection" />.</param>
        </member>
        <member name="M:LprServer.Extensions.Auth.LoginMechanismProcessor.ProcessResponse(System.String)">
            <inheritdoc />
        </member>
        <member name="T:LprServer.Extensions.Auth.LoginMechanismProcessor.States">
            <summary>
                Defines the States.
            </summary>
        </member>
        <member name="F:LprServer.Extensions.Auth.LoginMechanismProcessor.States.Initial">
            <summary>
                Defines the Initial
            </summary>
        </member>
        <member name="F:LprServer.Extensions.Auth.LoginMechanismProcessor.States.WaitingForUsername">
            <summary>
                Defines the WaitingForUsername
            </summary>
        </member>
        <member name="F:LprServer.Extensions.Auth.LoginMechanismProcessor.States.WaitingForPassword">
            <summary>
                Defines the WaitingForPassword
            </summary>
        </member>
        <member name="F:LprServer.Extensions.Auth.LoginMechanismProcessor.States.Completed">
            <summary>
                Defines the Completed
            </summary>
        </member>
        <member name="T:LprServer.Extensions.Auth.PlainAuthenticationCredentials">
            <summary>
                Defines the <see cref="T:LprServer.Extensions.Auth.PlainAuthenticationCredentials" />.
            </summary>
        </member>
        <member name="M:LprServer.Extensions.Auth.PlainAuthenticationCredentials.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.Extensions.Auth.PlainAuthenticationCredentials" /> class.
            </summary>
            <param name="username">The username<see cref="T:System.String" />.</param>
            <param name="password">The password<see cref="T:System.String" />.</param>
        </member>
        <member name="T:LprServer.Extensions.Auth.PlainMechanism">
            <summary>
                Defines the <see cref="T:LprServer.Extensions.Auth.PlainMechanism" /> which implements the PLAIN auth mechanism.
            </summary>
        </member>
        <member name="P:LprServer.Extensions.Auth.PlainMechanism.Identifier">
            <inheritdoc />
        </member>
        <member name="P:LprServer.Extensions.Auth.PlainMechanism.IsPlainText">
            <inheritdoc />
        </member>
        <member name="M:LprServer.Extensions.Auth.PlainMechanism.CreateAuthMechanismProcessor(LprServer.IConnection)">
            <inheritdoc />
        </member>
        <member name="M:LprServer.Extensions.Auth.PlainMechanism.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:LprServer.Extensions.Auth.PlainMechanism.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:LprServer.Extensions.Auth.PlainMechanismProcessor">
            <summary>
                Defines the <see cref="T:LprServer.Extensions.Auth.PlainMechanismProcessor" />.
            </summary>
        </member>
        <member name="T:LprServer.Extensions.Auth.PlainMechanismProcessor.ProcessingState">
            <summary>
                Defines the States.
            </summary>
        </member>
        <member name="F:LprServer.Extensions.Auth.PlainMechanismProcessor.ProcessingState.Initial">
            <summary>
                Defines the Initial
            </summary>
        </member>
        <member name="F:LprServer.Extensions.Auth.PlainMechanismProcessor.ProcessingState.AwaitingResponse">
            <summary>
                Defines the AwaitingResponse
            </summary>
        </member>
        <member name="M:LprServer.Extensions.Auth.PlainMechanismProcessor.#ctor(LprServer.IConnection)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.Extensions.Auth.PlainMechanismProcessor" /> class.
            </summary>
            <param name="connection">The connection<see cref="T:LprServer.IConnection" />.</param>
        </member>
        <member name="P:LprServer.Extensions.Auth.PlainMechanismProcessor.State">
            <summary>
                Gets or sets the State.
            </summary>
        </member>
        <member name="M:LprServer.Extensions.Auth.PlainMechanismProcessor.ProcessResponse(System.String)">
            <inheritdoc />
        </member>
        <member name="T:LprServer.Extensions.Auth.UsernameAndPasswordAuthenticationCredentials">
            <summary>
                Defines the <see cref="T:LprServer.Extensions.Auth.UsernameAndPasswordAuthenticationCredentials" />.
            </summary>
        </member>
        <member name="M:LprServer.Extensions.Auth.UsernameAndPasswordAuthenticationCredentials.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.Extensions.Auth.UsernameAndPasswordAuthenticationCredentials" /> class.
            </summary>
            <param name="username">The username<see cref="T:System.String" />.</param>
            <param name="password">The password<see cref="T:System.String" />.</param>
        </member>
        <member name="P:LprServer.Extensions.Auth.UsernameAndPasswordAuthenticationCredentials.Password">
            <summary>
                Gets the Password.
            </summary>
        </member>
        <member name="P:LprServer.Extensions.Auth.UsernameAndPasswordAuthenticationCredentials.Username">
            <summary>
                Gets the Username.
            </summary>
        </member>
        <member name="P:LprServer.Extensions.Auth.UsernameAndPasswordAuthenticationCredentials.Type">
            <inheritdoc />
        </member>
        <member name="M:LprServer.Extensions.Auth.UsernameAndPasswordAuthenticationCredentials.ValidateResponse(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:LprServer.Extensions.EightBitMimeExtension">
            <summary>
                Defines the <see cref="T:LprServer.Extensions.EightBitMimeExtension" />.
            </summary>
        </member>
        <member name="M:LprServer.Extensions.EightBitMimeExtension.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.Extensions.EightBitMimeExtension" /> class.
            </summary>
        </member>
        <member name="M:LprServer.Extensions.EightBitMimeExtension.CreateExtensionProcessor(LprServer.IConnection)">
            <inheritdoc />
        </member>
        <member name="T:LprServer.Extensions.EightBitMimeExtension.EightBitMimeExtensionProcessor">
            <summary>
                Defines the <see cref="T:LprServer.Extensions.EightBitMimeExtension.EightBitMimeExtensionProcessor" />.
            </summary>
        </member>
        <member name="M:LprServer.Extensions.EightBitMimeExtension.EightBitMimeExtensionProcessor.#ctor(LprServer.IConnection)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.Extensions.EightBitMimeExtension.EightBitMimeExtensionProcessor" /> class.
            </summary>
            <param name="connection">The connection<see cref="T:LprServer.IConnection" />.</param>
        </member>
        <member name="M:LprServer.Extensions.EightBitMimeExtension.EightBitMimeExtensionProcessor.GetEHLOKeywords">
            <inheritdoc />
        </member>
        <member name="T:LprServer.Extensions.ExtensionProcessor">
            <summary>
                Defines the <see cref="T:LprServer.Extensions.ExtensionProcessor" />.
            </summary>
        </member>
        <member name="M:LprServer.Extensions.ExtensionProcessor.#ctor(LprServer.IConnection)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.Extensions.ExtensionProcessor" /> class.
            </summary>
            <param name="connection">The connection<see cref="T:LprServer.IConnection" />.</param>
        </member>
        <member name="P:LprServer.Extensions.ExtensionProcessor.Connection">
            <summary>
                Gets the Connection.
            </summary>
        </member>
        <member name="M:LprServer.Extensions.ExtensionProcessor.GetEHLOKeywords">
            <summary>
                Returns the EHLO keywords which advertise this extension to the client.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.</returns>
        </member>
        <member name="T:LprServer.Extensions.IExtension">
            <summary>
                Defines the <see cref="T:LprServer.Extensions.IExtension" />.
            </summary>
        </member>
        <member name="M:LprServer.Extensions.IExtension.CreateExtensionProcessor(LprServer.IConnection)">
            <summary>
                Creates the extension processor for a connection.
            </summary>
            <param name="connection">The connection<see cref="T:LprServer.IConnection" />.</param>
            <returns>
                The <see cref="T:LprServer.Extensions.IExtensionProcessor" />.
            </returns>
        </member>
        <member name="T:LprServer.Extensions.IExtensionProcessor">
            <summary>
                Defines the <see cref="T:LprServer.Extensions.IExtensionProcessor" />.
            </summary>
        </member>
        <member name="M:LprServer.Extensions.IExtensionProcessor.GetEHLOKeywords">
            <summary>
                Returns a sequence of EHLO keywords which are output to advertise the support for this extension to the client.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.</returns>
        </member>
        <member name="T:LprServer.Extensions.SizeExtension">
            <summary>
                Defines the <see cref="T:LprServer.Extensions.SizeExtension" />.
            </summary>
        </member>
        <member name="M:LprServer.Extensions.SizeExtension.CreateExtensionProcessor(LprServer.IConnection)">
            <inheritdoc />
        </member>
        <member name="T:LprServer.Extensions.SizeExtension.SizeExtensionProcessor">
            <summary>
                Defines the <see cref="T:LprServer.Extensions.SizeExtension.SizeExtensionProcessor" />.
            </summary>
        </member>
        <member name="M:LprServer.Extensions.SizeExtension.SizeExtensionProcessor.#ctor(LprServer.IConnection)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.Extensions.SizeExtension.SizeExtensionProcessor" /> class.
            </summary>
            <param name="connection">The connection<see cref="T:LprServer.IConnection" />.</param>
        </member>
        <member name="P:LprServer.Extensions.SizeExtension.SizeExtensionProcessor.Connection">
            <summary>
                Gets the connection this processor is for.
            </summary>
            <value>
                The connection.
            </value>
        </member>
        <member name="M:LprServer.Extensions.SizeExtension.SizeExtensionProcessor.GetEHLOKeywords">
            <inheritdoc />
        </member>
        <member name="M:LprServer.Extensions.SizeExtension.SizeExtensionProcessor.SetParameter(LprServer.IConnection,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:LprServer.Extensions.SmtpUtfEightExtension">
            <summary>Implements the LPRUTF8 extension.</summary>
        </member>
        <member name="M:LprServer.Extensions.SmtpUtfEightExtension.CreateExtensionProcessor(LprServer.IConnection)">
            <summary>Creates the extension processor for a connection.</summary>
            <param name="connection">The connection<see cref="T:LprServer.IConnection" />.</param>
            <returns>The <see cref="T:LprServer.Extensions.IExtensionProcessor" />.</returns>
        </member>
        <member name="T:LprServer.Extensions.StartTlsExtension">
            <summary>
                Defines the <see cref="T:LprServer.Extensions.StartTlsExtension" />.
            </summary>
        </member>
        <member name="M:LprServer.Extensions.StartTlsExtension.CreateExtensionProcessor(LprServer.IConnection)">
            <inheritdoc />
        </member>
        <member name="T:LprServer.Extensions.StartTlsExtension.StartTlsExtensionProcessor">
            <summary>
                Defines the <see cref="T:LprServer.Extensions.StartTlsExtension.StartTlsExtensionProcessor" />.
            </summary>
        </member>
        <member name="M:LprServer.Extensions.StartTlsExtension.StartTlsExtensionProcessor.#ctor(LprServer.IConnection)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.Extensions.StartTlsExtension.StartTlsExtensionProcessor" /> class.
            </summary>
            <param name="connection">The connection<see cref="T:LprServer.IConnection" />.</param>
        </member>
        <member name="P:LprServer.Extensions.StartTlsExtension.StartTlsExtensionProcessor.Connection">
            <summary>
                Gets the connection this processor is for.
            </summary>
            <value>
                The connection.
            </value>
        </member>
        <member name="M:LprServer.Extensions.StartTlsExtension.StartTlsExtensionProcessor.GetEHLOKeywords">
            <inheritdoc />
        </member>
        <member name="T:LprServer.Extensions.StartTlsVerb">
            <summary>
                Defines the <see cref="T:LprServer.Extensions.StartTlsVerb" />.
            </summary>
        </member>
        <member name="M:LprServer.Extensions.StartTlsVerb.Process(LprServer.IConnection,LprServer.SmtpCommand)">
            <inheritdoc />
        </member>
        <member name="T:LprServer.AuthenticationResult">
            <summary>
                Defines the AuthenticationResult.
            </summary>
        </member>
        <member name="F:LprServer.AuthenticationResult.Success">
            <summary>
                Defines the Success
            </summary>
        </member>
        <member name="F:LprServer.AuthenticationResult.Failure">
            <summary>
                Defines the Failure
            </summary>
        </member>
        <member name="F:LprServer.AuthenticationResult.TemporaryFailure">
            <summary>
                Defines the TemporaryFailure
            </summary>
        </member>
        <member name="T:LprServer.FileMessage">
            <summary>
                Defines the <see cref="T:LprServer.FileMessage" />.
            </summary>
        </member>
        <member name="M:LprServer.FileMessage.#ctor(System.IO.FileInfo,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.FileMessage" /> class.
            </summary>
            <param name="file">The file<see cref="T:System.IO.FileInfo" />.</param>
            <param name="keepOnDispose">The keepOnDispose<see cref="T:System.Boolean" />.</param>
        </member>
        <member name="P:LprServer.FileMessage.File">
            <summary>
                Gets the file.
            </summary>
            <value>
                The file.
            </value>
        </member>
        <member name="P:LprServer.FileMessage.RecipientsList">
            <summary>
                Gets the recipients list.
            </summary>
            <value>
                The recipients list.
            </value>
        </member>
        <member name="P:LprServer.FileMessage.DeclaredMessageSize">
            <summary>
                Gets the DeclaredMessageSize.
            </summary>
        </member>
        <member name="P:LprServer.FileMessage.EightBitTransport">
            <summary>
                Gets a value indicating whether EightBitTransport.
            </summary>
        </member>
        <member name="P:LprServer.FileMessage.From">
            <summary>
                Gets the From.
            </summary>
        </member>
        <member name="P:LprServer.FileMessage.ReceivedDate">
            <summary>
                Gets the ReceivedDate.
            </summary>
        </member>
        <member name="P:LprServer.FileMessage.SecureConnection">
            <summary>
                Gets a value indicating whether SecureConnection.
            </summary>
        </member>
        <member name="P:LprServer.FileMessage.Session">
            <summary>
                Gets the Session.
            </summary>
        </member>
        <member name="P:LprServer.FileMessage.Recipients">
            <summary>
                Gets the To.
            </summary>
        </member>
        <member name="M:LprServer.FileMessage.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:LprServer.FileMessage.GetData">
            <summary>
                Gets a stream which returns the message data.
            </summary>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.
            </returns>
        </member>
        <member name="M:LprServer.FileMessage.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="T:LprServer.FileMessageBuilder">
            <summary>
                Implements a message builder which will build a <see cref="T:LprServer.FileMessage" />.
            </summary>
            <seealso cref="T:LprServer.IMessageBuilder" />
        </member>
        <member name="M:LprServer.FileMessageBuilder.#ctor(System.IO.FileInfo,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.FileMessageBuilder" /> class.
            </summary>
            <param name="file">The file.</param>
            <param name="keepOnDispose">if set to <c>true</c> [keep on dispose].</param>
        </member>
        <member name="P:LprServer.FileMessageBuilder.DeclaredMessageSize">
            <inheritdoc />
        </member>
        <member name="P:LprServer.FileMessageBuilder.EightBitTransport">
            <inheritdoc />
        </member>
        <member name="P:LprServer.FileMessageBuilder.From">
            <inheritdoc />
        </member>
        <member name="P:LprServer.FileMessageBuilder.ReceivedDate">
            <inheritdoc />
        </member>
        <member name="P:LprServer.FileMessageBuilder.SecureConnection">
            <inheritdoc />
        </member>
        <member name="P:LprServer.FileMessageBuilder.Session">
            <inheritdoc />
        </member>
        <member name="P:LprServer.FileMessageBuilder.Recipients">
            <inheritdoc />
        </member>
        <member name="M:LprServer.FileMessageBuilder.GetData">
            <inheritdoc />
        </member>
        <member name="M:LprServer.FileMessageBuilder.ToMessage">
            <inheritdoc />
        </member>
        <member name="M:LprServer.FileMessageBuilder.WriteData">
            <inheritdoc />
        </member>
        <member name="M:LprServer.FileMessageBuilder.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:LprServer.FileMessageBuilder.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="T:LprServer.FileSession">
            <summary>
                Implements an <see cref="T:LprServer.ISession" /> where the session log is saved to a file.
            </summary>
            <seealso cref="T:LprServer.AbstractSession" />
        </member>
        <member name="M:LprServer.FileSession.#ctor(System.Net.IPAddress,System.DateTime,System.IO.FileInfo,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.FileSession" /> class.
            </summary>
            <param name="clientAddress">The clientAddress<see cref="T:System.Net.IPAddress" />.</param>
            <param name="startDate">The startDate<see cref="T:System.DateTime" />.</param>
            <param name="file">The file<see cref="T:System.IO.FileInfo" />.</param>
            <param name="keepOnDispose">The keepOnDispose<see cref="T:System.Boolean" />.</param>
        </member>
        <member name="M:LprServer.FileSession.AppendLineToSessionLog(System.String)">
            <inheritdoc />
        </member>
        <member name="M:LprServer.FileSession.GetLog">
            <inheritdoc />
        </member>
        <member name="M:LprServer.FileSession.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="T:LprServer.IConnection">
            <summary>
                Defines the <see cref="T:LprServer.IConnection" />.
            </summary>
        </member>
        <member name="P:LprServer.IConnection.CurrentMessage">
            <summary>
                Gets the current message which has been started by the MAIL FROM command but not yet completed with
                a valid response from the server after the DATA command.
            </summary>
        </member>
        <member name="P:LprServer.IConnection.ExtensionProcessors">
            <summary>
                Gets a list of extensions which are available for this connection.
            </summary>
        </member>
        <member name="P:LprServer.IConnection.MailVerb">
            <summary>
                Gets the MailVerb.
            </summary>
        </member>
        <member name="P:LprServer.IConnection.Server">
            <summary>
                Gets the Server.
            </summary>
        </member>
        <member name="P:LprServer.IConnection.Session">
            <summary>
                Gets the Session.
            </summary>
        </member>
        <member name="P:LprServer.IConnection.VerbMap">
            <summary>
                Gets the VerbMap.
            </summary>
        </member>
        <member name="E:LprServer.IConnection.ConnectionClosedEventHandler">
            <summary>
                Occurs when connection is closed.
            </summary>
        </member>
        <member name="M:LprServer.IConnection.AbortMessage">
            <summary>
                Aborts the current message started by the MAIL FROM command.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.</returns>
        </member>
        <member name="M:LprServer.IConnection.ApplyStreamFilter(System.Func{System.IO.Stream,System.Threading.Tasks.Task{System.IO.Stream}})">
            <summary>
                Applies a filter to the stream replacing the stream that this connection is reading/writing to with a new one. This
                method is used to implement TLS etc.
            </summary>
            <param name="filter">The filter.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.</returns>
        </member>
        <member name="M:LprServer.IConnection.CloseConnection">
            <summary>
                Closes the connection.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.</returns>
        </member>
        <member name="M:LprServer.IConnection.CommitMessage">
            <summary>
                Commits the current message.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.</returns>
        </member>
        <member name="M:LprServer.IConnection.NewMessage">
            <summary>
                Creates and returns a new message and sets it as the current message.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.</returns>
        </member>
        <member name="M:LprServer.IConnection.ReadLine">
            <summary>
                Reads the next line from the client and returns it.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.</returns>
        </member>
        <member name="M:LprServer.IConnection.WriteResponse(LprServer.SmtpResponse)">
            <summary>
                Writes an <see cref="T:LprServer.SmtpResponse" /> to the client.
            </summary>
            <param name="response">The response<see cref="T:LprServer.SmtpResponse" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.</returns>
        </member>
        <member name="M:LprServer.IConnection.ReadLineBytes">
            <summary>
                Reads bytes until CRLF and returns them
            </summary>
            <returns></returns>
        </member>
        <member name="T:LprServer.IConnectionChannel">
            <summary>
                Represents a channel connecting the client and server.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="P:LprServer.IConnectionChannel.ClientIPAddress">
            <summary>
                Gets the client ip address.
            </summary>
            <value>
                The client ip address.
            </value>
        </member>
        <member name="P:LprServer.IConnectionChannel.IsConnected">
            <summary>
                Gets a value indicating whether this instance is connected.
            </summary>
            <value>
                <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LprServer.IConnectionChannel.ReceiveTimeout">
            <summary>
                Gets or sets the receive timeout after which if data is expected but not received, the connection will be
                terminated.
            </summary>
            <value>
                The receive timeout.
            </value>
        </member>
        <member name="P:LprServer.IConnectionChannel.SendTimeout">
            <summary>
                Gets or sets the send timeout after which is data is being attempted to be sent but not completed, the connection
                will be terminated.
            </summary>
            <value>
                The send timeout.
            </value>
        </member>
        <member name="E:LprServer.IConnectionChannel.ClosedEventHandler">
            <summary>
                Occurs when the channel is closed.
            </summary>
        </member>
        <member name="M:LprServer.IConnectionChannel.ApplyStreamFilter(System.Func{System.IO.Stream,System.Threading.Tasks.Task{System.IO.Stream}})">
            <summary>
                Applies the a filter to the stream which is used to read data from the channel.
            </summary>
            <param name="filter">The filter.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.</returns>
        </member>
        <member name="M:LprServer.IConnectionChannel.Close">
            <summary>
                Closes the channel and notifies users via the <see cref="E:LprServer.IConnectionChannel.ClosedEventHandler" /> event.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.</returns>
        </member>
        <member name="M:LprServer.IConnectionChannel.Flush">
            <summary>
                Flushes outgoing data.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.</returns>
        </member>
        <member name="M:LprServer.IConnectionChannel.ReadLine">
            <summary>
                Reads the next line from the channel.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.</returns>
        </member>
        <member name="M:LprServer.IConnectionChannel.WriteLine(System.String)">
            <summary>
                Writes a line of text to the client.
            </summary>
            <param name="text">The text<see cref="T:System.String" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.</returns>
        </member>
        <member name="M:LprServer.IConnectionChannel.ReadLineBytes">
            <summary>
                Reads bytes until CRLF and returns them
            </summary>
            <returns></returns>
        </member>
        <member name="T:LprServer.ICurrentDateTimeProvider">
            <summary>
                Defines the <see cref="T:LprServer.ICurrentDateTimeProvider" />.
            </summary>
        </member>
        <member name="M:LprServer.ICurrentDateTimeProvider.GetCurrentDateTime">
            <summary>
                Returns the current date and time.
            </summary>
            <returns>The <see cref="T:System.DateTime" />.</returns>
        </member>
        <member name="T:LprServer.IEditableSession">
            <summary>
                Defines the <see cref="T:LprServer.IEditableSession" />.
            </summary>
        </member>
        <member name="P:LprServer.IEditableSession.Authenticated">
            <summary>
                Gets or sets a value indicating whether Authenticated.
            </summary>
        </member>
        <member name="P:LprServer.IEditableSession.AuthenticationCredentials">
            <summary>
                Gets or sets the credentials used during authentication.
            </summary>
        </member>
        <member name="P:LprServer.IEditableSession.ClientAddress">
            <summary>
                Gets or sets the client IP address.
            </summary>
        </member>
        <member name="P:LprServer.IEditableSession.ClientName">
            <summary>
                Gets or sets the client name recevied in HELO or EHLO request.
            </summary>
        </member>
        <member name="P:LprServer.IEditableSession.CompletedNormally">
            <summary>
                Gets or sets a value indicating whether the session completed without an error.
            </summary>
        </member>
        <member name="P:LprServer.IEditableSession.EndDate">
            <summary>
                Gets or sets the date and time the session ended.
            </summary>
        </member>
        <member name="P:LprServer.IEditableSession.SecureConnection">
            <summary>
                Gets or sets a value indicating whether a secure SSL/TLS channel was established.
            </summary>
        </member>
        <member name="P:LprServer.IEditableSession.SessionError">
            <summary>
                Gets or sets.
            </summary>
        </member>
        <member name="P:LprServer.IEditableSession.SessionErrorType">
            <summary>
                Gets or sets the SessionErrorType.
            </summary>
        </member>
        <member name="P:LprServer.IEditableSession.StartDate">
            <summary>
                Gets or sets the StartDate.
            </summary>
        </member>
        <member name="M:LprServer.IEditableSession.AddMessage(LprServer.IMessage)">
            <summary>
                Adds a message to this session.
            </summary>
            <param name="message">The message<see cref="T:LprServer.IMessage" />.</param>
        </member>
        <member name="M:LprServer.IEditableSession.AppendLineToSessionLog(System.String)">
            <summary>Appends a line of text to the session log.</summary>
            <param name="text">The text<see cref="T:System.String" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
        </member>
        <member name="M:LprServer.IEditableSession.IncrementBadCommandCounter">
            <summary>
                Increments the bad command counter.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
        </member>
        <member name="M:LprServer.IEditableSession.ResetBadCommandCounter">
            <summary>
                Resets the bad command counter.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
        </member>
        <member name="T:LprServer.IMessage">
            <summary>
                Defines the <see cref="T:LprServer.IMessage" />.
            </summary>
        </member>
        <member name="P:LprServer.IMessage.DeclaredMessageSize">
            <summary>
                Gets the size of the message as declared by the client using the SIZE extension to the MAIL FROM command, or null
                if not specified by the client.
            </summary>
        </member>
        <member name="P:LprServer.IMessage.EightBitTransport">
            <summary>
                Gets a value indicating whether the messaage was received over a 8-bit 'clean' connection using the 8BITMIME
                extension.
            </summary>
        </member>
        <member name="P:LprServer.IMessage.From">
            <summary>
                Gets the sender of the message as specified by the client when sending MAIL FROM command.
            </summary>
        </member>
        <member name="P:LprServer.IMessage.ReceivedDate">
            <summary>
                Gets the date the message was received by the server.
            </summary>
        </member>
        <member name="P:LprServer.IMessage.SecureConnection">
            <summary>
                Gets a value indicating whether if message was received over a secure connection.
            </summary>
        </member>
        <member name="P:LprServer.IMessage.Session">
            <summary>
                Gets the Session message was received on.
            </summary>
        </member>
        <member name="P:LprServer.IMessage.Recipients">
            <summary>
                Gets the recipient of the message as specified by the client when sending RCPT TO command.
            </summary>
        </member>
        <member name="M:LprServer.IMessage.GetData">
            <summary>
                Gets a stream which returns the message data.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.</returns>
        </member>
        <member name="T:LprServer.IMessageBuilder">
            <summary>
                Defines the <see cref="T:LprServer.IMessageBuilder" />.
            </summary>
        </member>
        <member name="P:LprServer.IMessageBuilder.DeclaredMessageSize">
            <summary>
                Gets or sets the message size declared by the client using the SIZE extension.
            </summary>
        </member>
        <member name="P:LprServer.IMessageBuilder.EightBitTransport">
            <summary>
                Gets or sets a value indicating whether the message was received over an 8-bit clean channel.
            </summary>
        </member>
        <member name="P:LprServer.IMessageBuilder.From">
            <summary>
                Gets or sets the From.
            </summary>
        </member>
        <member name="P:LprServer.IMessageBuilder.ReceivedDate">
            <summary>
                Gets or sets the date the message was received.
            </summary>
        </member>
        <member name="P:LprServer.IMessageBuilder.SecureConnection">
            <summary>
                Gets or sets a value indicating whether the message is being received over a secure connection.
            </summary>
        </member>
        <member name="P:LprServer.IMessageBuilder.Session">
            <summary>
                Gets or sets the Session this message is being received in.
            </summary>
        </member>
        <member name="P:LprServer.IMessageBuilder.Recipients">
            <summary>
                Gets the recipients of the message as specified in the RCPT TO command.
            </summary>
            <value>
                The recipients.
            </value>
        </member>
        <member name="M:LprServer.IMessageBuilder.GetData">
            <summary>
                Gets a read only stream containing the message data.
            </summary>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.
            </returns>
        </member>
        <member name="M:LprServer.IMessageBuilder.ToMessage">
            <summary>
                Turns the editable messge into a read only message.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.</returns>
        </member>
        <member name="M:LprServer.IMessageBuilder.WriteData">
            <summary>
                Returns a stream which can be used to write to the message data.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.</returns>
        </member>
        <member name="T:LprServer.IParameterProcessor">
            <summary>
                Defines the <see cref="T:LprServer.IParameterProcessor" />.
            </summary>
        </member>
        <member name="M:LprServer.IParameterProcessor.SetParameter(LprServer.IConnection,System.String,System.String)">
            <summary>
                Processes the parameter which has the <paramref name="key" /> and <paramref name="value" /> specified.
            </summary>
            <param name="connection">The connection<see cref="T:LprServer.IConnection" />.</param>
            <param name="key">The key<see cref="T:System.String" />.</param>
            <param name="value">The value<see cref="T:System.String" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.</returns>
        </member>
        <member name="T:LprServer.IRandomIntegerGenerator">
            <summary>
                Defines the <see cref="T:LprServer.IRandomIntegerGenerator" />.
            </summary>
        </member>
        <member name="M:LprServer.IRandomIntegerGenerator.GenerateRandomInteger(System.Int32,System.Int32)">
            <summary>
                Generates a random integer in a specfied range.
            </summary>
            <param name="minValue">The minValue<see cref="T:System.Int32" />.</param>
            <param name="maxValue">The maxValue<see cref="T:System.Int32" />.</param>
            <returns>
                The <see cref="T:System.Int32" />.
            </returns>
        </member>
        <member name="T:LprServer.IServerOptions">
            <summary>
                Defines the <see cref="T:LprServer.IServerOptions" />.
            </summary>
        </member>
        <member name="P:LprServer.IServerOptions.DomainName">
            <summary>
                Gets the DomainName
                Gets domain name reported by the server to clients.
            </summary>
        </member>
        <member name="P:LprServer.IServerOptions.IpAddress">
            <summary>
                Gets the IP address on which to listen for connections.
            </summary>
        </member>
        <member name="P:LprServer.IServerOptions.MaximumNumberOfSequentialBadCommands">
            <summary>
                Gets the max number of sequential bad commands before the client will be disconnected.
            </summary>
        </member>
        <member name="P:LprServer.IServerOptions.PortNumber">
            <summary>
                Gets the TCP port number on which to listen for connections.
            </summary>
        </member>
        <member name="P:LprServer.IServerOptions.FallbackEncoding">
            <summary>
                Gets an encoding which will be used if bytes received from the client cannot be decoded as ASCII/UTF-8.
            </summary>
        </member>
        <member name="M:LprServer.IServerOptions.GetExtensions(LprServer.IConnectionChannel)">
            <summary>
                Gets the extensions that should be enabled for the specified connection.
            </summary>
            <param name="connectionChannel">The connectionChannel<see cref="T:LprServer.IConnectionChannel" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> resulting in a sequence of <see cref="T:LprServer.Extensions.IExtension" /> for the extensions.</returns>
        </member>
        <member name="M:LprServer.IServerOptions.GetMaximumMessageSize(LprServer.IConnection)">
            <summary>
                Gets the maximum allowed size of the message for the specified connection.
            </summary>
            <param name="connection">The connection.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.</returns>
        </member>
        <member name="M:LprServer.IServerOptions.GetReceiveTimeout(LprServer.IConnectionChannel)">
            <summary>
                Gets the receive timeout that should be used for the specified connection.
            </summary>
            <param name="connectionChannel">The connection channel.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.</returns>
        </member>
        <member name="M:LprServer.IServerOptions.GetSendTimeout(LprServer.IConnectionChannel)">
            <summary>
                Gets the send timeout that should be used for the specified connection.
            </summary>
            <param name="connectionChannel">The connectionChannel<see cref="T:LprServer.IConnectionChannel" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.</returns>
        </member>
        <member name="M:LprServer.IServerOptions.GetSSLCertificate(LprServer.IConnection)">
            <summary>
                Gets the SSL certificate that should be used for the specified connection.
            </summary>
            <param name="connection">The connection.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.</returns>
        </member>
        <member name="M:LprServer.IServerOptions.IsAuthMechanismEnabled(LprServer.IConnection,LprServer.Extensions.Auth.IAuthMechanism)">
            <summary>
                Determines whether the specified auth mechanism should be enabled for the specified connection.
            </summary>
            <param name="connection">The connection.</param>
            <param name="authMechanism">The auth mechanism.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.</returns>
        </member>
        <member name="M:LprServer.IServerOptions.IsSessionLoggingEnabled(LprServer.IConnection)">
            <summary>
                Gets a value indicating whether session logging should be enabled for the given connection.
            </summary>
            <param name="connection">The connection<see cref="T:LprServer.IConnection" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.</returns>
        </member>
        <member name="M:LprServer.IServerOptions.IsSSLEnabled(LprServer.IConnection)">
            <summary>
                Gets a value indicating whether to run in SSL mode.
            </summary>
            <param name="connection">The connection<see cref="T:LprServer.IConnection" />.</param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:LprServer.IServerOptions.OnCommandReceived(LprServer.IConnection,LprServer.SmtpCommand)">
            <summary>
                Called when a command received in the specified LPR session.
            </summary>
            <param name="connection">The connection.</param>
            <param name="command">The command.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
        </member>
        <member name="M:LprServer.IServerOptions.OnCreateNewMessage(LprServer.IConnection)">
            <summary>
                Called when a new message is started using the MAIL FROM command and must returns the instance of
                <see cref="T:LprServer.IMessageBuilder" /> which will be used to record the message.
            </summary>
            <param name="connection">The connection<see cref="T:LprServer.IConnection" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.</returns>
        </member>
        <member name="M:LprServer.IServerOptions.OnCreateNewSession(LprServer.IConnectionChannel)">
            <summary>
                Called when a new session is started and must return an object which is used to record details about that session.
            </summary>
            <param name="connectionChannel">The connectionChannel<see cref="T:LprServer.IConnectionChannel" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.</returns>
        </member>
        <member name="M:LprServer.IServerOptions.OnMessageCompleted(LprServer.IConnection)">
            <summary>
                Called when a message is received but not committed.
            </summary>
            <param name="connection">The connection<see cref="T:LprServer.IConnection" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.</returns>
        </member>
        <member name="M:LprServer.IServerOptions.OnMessageReceived(LprServer.IConnection,LprServer.IMessage)">
            <summary>
                Called when a new message is received by the server.
            </summary>
            <param name="connection">The connection<see cref="T:LprServer.IConnection" />.</param>
            <param name="message">The message<see cref="T:LprServer.IMessage" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.</returns>
        </member>
        <member name="M:LprServer.IServerOptions.OnMessageRecipientAdding(LprServer.IConnection,LprServer.IMessageBuilder,System.String)">
            <summary>
                Called when a new recipient is requested for a message using the MAIL FROM command.
            </summary>
            <param name="connection">The connection<see cref="T:LprServer.IConnection" />.</param>
            <param name="message">The message<see cref="T:LprServer.IMessageBuilder" />.</param>
            <param name="recipient">The recipient<see cref="T:System.String" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.</returns>
        </member>
        <member name="M:LprServer.IServerOptions.OnMessageStart(LprServer.IConnection,System.String)">
            <summary>
                Called when a new message is started in the specified session.
            </summary>
            <param name="connection">The connection.</param>
            <param name="from">From.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
        </member>
        <member name="M:LprServer.IServerOptions.OnSessionCompleted(LprServer.IConnection,LprServer.ISession)">
            <summary>
                Called when a LPR session is completed.
            </summary>
            <param name="connection">The connection.</param>
            <param name="session">The session.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
        </member>
        <member name="M:LprServer.IServerOptions.OnSessionStarted(LprServer.IConnection,LprServer.ISession)">
            <summary>
                Called when a new LPR session is started.
            </summary>
            <param name="connection">The connection.</param>
            <param name="session">The session.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
        </member>
        <member name="M:LprServer.IServerOptions.ValidateAuthenticationCredentials(LprServer.IConnection,LprServer.Extensions.Auth.IAuthenticationCredentials)">
            <summary>
                Validates the authentication request to determine if the supplied details
                are correct.
            </summary>
            <param name="connection">The connection.</param>
            <param name="authenticationRequest">The authentication request.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the async operation.</returns>
        </member>
        <member name="T:LprServer.ISession">
            <summary>
                Defines the <see cref="T:LprServer.ISession" />.
            </summary>
        </member>
        <member name="P:LprServer.ISession.Authenticated">
            <summary>
                Gets a value indicating whether this the client provided authentication.
            </summary>
        </member>
        <member name="P:LprServer.ISession.AuthenticationCredentials">
            <summary>
                Gets the AuthenticationCredentials.
            </summary>
        </member>
        <member name="P:LprServer.ISession.ClientAddress">
            <summary>
                Gets the IP address of the client that established this session.
            </summary>
        </member>
        <member name="P:LprServer.ISession.ClientName">
            <summary>
                Gets the ClientName
                Gets or sets the name of the client as reported in its HELO/EHLO command
                or null.
            </summary>
        </member>
        <member name="P:LprServer.ISession.CompletedNormally">
            <summary>
                Gets a value indicating whether this <see cref="T:LprServer.AbstractSession" /> completed normally (by the client issuing a
                QUIT command)
                as opposed to abormal termination such as a connection timeout or unhandled errors in the server.
            </summary>
        </member>
        <member name="P:LprServer.ISession.EndDate">
            <summary>
                Gets the date the session ended.
            </summary>
        </member>
        <member name="P:LprServer.ISession.SecureConnection">
            <summary>
                Gets a value indicating whether the session is over a secure connection.
            </summary>
        </member>
        <member name="P:LprServer.ISession.SessionError">
            <summary>
                Gets the error that caused the session to terminate if it didn't complete normally.
            </summary>
        </member>
        <member name="P:LprServer.ISession.SessionErrorType">
            <summary>
                Gets a classification of the type of error which was experienced.
            </summary>
        </member>
        <member name="P:LprServer.ISession.StartDate">
            <summary>
                Gets the date the session started.
            </summary>
        </member>
        <member name="P:LprServer.ISession.NumberOfBadCommandsInARow">
            <summary>
                Indicates the current number of bad commands this client has sent in a row.
            </summary>
        </member>
        <member name="M:LprServer.ISession.GetLog">
            <summary>
                Gets the session log (all communication between the client and server)
                if session logging is enabled.
            </summary>
            <returns>A <see cref="T:System.IO.TextReader" /> which will read from the session log.</returns>
        </member>
        <member name="M:LprServer.ISession.GetMessages">
            <summary>
                Gets list of messages received in this session.
            </summary>
            <returns>A read only list of messages.</returns>
        </member>
        <member name="T:LprServer.ISmtpServer">
            <summary>
                Defines the <see cref="T:LprServer.ISmtpServer" />.
            </summary>
        </member>
        <member name="P:LprServer.ISmtpServer.Options">
            <summary>
                Gets the Options.
            </summary>
        </member>
        <member name="T:LprServer.Logging">
            <summary>
                Helper class implementing logging.
            </summary>
        </member>
        <member name="P:LprServer.Logging.Factory">
            <summary>
                Gets the logging factory.
            </summary>
            <value>
                The factory.
            </value>
        </member>
        <member name="T:LprServer.MemoryMessage">
            <summary>
                Defines the <see cref="T:LprServer.MemoryMessage" />.
            </summary>
        </member>
        <member name="M:LprServer.MemoryMessage.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.MemoryMessage" /> class.
            </summary>
        </member>
        <member name="P:LprServer.MemoryMessage.Data">
            <summary>
                Gets or sets the message data.
            </summary>
            <value>
                The data.
            </value>
        </member>
        <member name="P:LprServer.MemoryMessage.RecipientsList">
            <summary>
                Gets the recipients list.
            </summary>
            <value>
                The recipients list.
            </value>
        </member>
        <member name="P:LprServer.MemoryMessage.DeclaredMessageSize">
            <summary>
                Gets the DeclaredMessageSize.
            </summary>
        </member>
        <member name="P:LprServer.MemoryMessage.EightBitTransport">
            <summary>
                Gets a value indicating whether EightBitTransport.
            </summary>
        </member>
        <member name="P:LprServer.MemoryMessage.From">
            <summary>
                Gets the From.
            </summary>
        </member>
        <member name="P:LprServer.MemoryMessage.ReceivedDate">
            <summary>
                Gets the ReceivedDate.
            </summary>
        </member>
        <member name="P:LprServer.MemoryMessage.SecureConnection">
            <summary>
                Gets a value indicating whether if message was received over a secure connection.
            </summary>
        </member>
        <member name="P:LprServer.MemoryMessage.Session">
            <summary>
                Gets the Session message was received on.
            </summary>
        </member>
        <member name="P:LprServer.MemoryMessage.Recipients">
            <summary>
                Gets the recipient of the message as specified by the client when sending RCPT TO command.
            </summary>
        </member>
        <member name="M:LprServer.MemoryMessage.GetData">
            <summary>
                Gets a stream which returns the message data.
            </summary>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.
            </returns>
        </member>
        <member name="M:LprServer.MemoryMessage.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:LprServer.MemoryMessage.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="T:LprServer.MemoryMessageBuilder">
            <summary>
                Defines the <see cref="T:LprServer.MemoryMessageBuilder" />.
            </summary>
        </member>
        <member name="M:LprServer.MemoryMessageBuilder.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.MemoryMessageBuilder" /> class.
            </summary>
        </member>
        <member name="M:LprServer.MemoryMessageBuilder.#ctor(LprServer.MemoryMessage)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.MemoryMessageBuilder" /> class.
            </summary>
            <param name="message">The message<see cref="T:LprServer.MemoryMessage" />.</param>
        </member>
        <member name="P:LprServer.MemoryMessageBuilder.DeclaredMessageSize">
            <inheritdoc />
        </member>
        <member name="P:LprServer.MemoryMessageBuilder.EightBitTransport">
            <inheritdoc />
        </member>
        <member name="P:LprServer.MemoryMessageBuilder.From">
            <inheritdoc />
        </member>
        <member name="P:LprServer.MemoryMessageBuilder.ReceivedDate">
            <inheritdoc />
        </member>
        <member name="P:LprServer.MemoryMessageBuilder.SecureConnection">
            <inheritdoc />
        </member>
        <member name="P:LprServer.MemoryMessageBuilder.Session">
            <inheritdoc />
        </member>
        <member name="P:LprServer.MemoryMessageBuilder.Recipients">
            <inheritdoc />
        </member>
        <member name="M:LprServer.MemoryMessageBuilder.GetData">
            <inheritdoc />
        </member>
        <member name="M:LprServer.MemoryMessageBuilder.ToMessage">
            <inheritdoc />
        </member>
        <member name="M:LprServer.MemoryMessageBuilder.WriteData">
            <inheritdoc />
        </member>
        <member name="M:LprServer.MemoryMessageBuilder.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:LprServer.MemoryMessageBuilder.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="T:LprServer.MemorySession">
            <summary>
                Defines the <see cref="T:LprServer.MemorySession" />.
            </summary>
        </member>
        <member name="M:LprServer.MemorySession.#ctor(System.Net.IPAddress,System.DateTime)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.MemorySession" /> class.
            </summary>
            <param name="clientAddress">The clientAddress<see cref="T:System.Net.IPAddress" />.</param>
            <param name="startDate">The startDate<see cref="T:System.DateTime" />.</param>
        </member>
        <member name="M:LprServer.MemorySession.AppendLineToSessionLog(System.String)">
            <inheritdoc />
        </member>
        <member name="M:LprServer.MemorySession.GetLog">
            <inheritdoc />
        </member>
        <member name="M:LprServer.MemorySession.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:LprServer.MessageEventArgs">
            <summary>
                Defines the <see cref="T:LprServer.MessageEventArgs" />.
            </summary>
        </member>
        <member name="M:LprServer.MessageEventArgs.#ctor(LprServer.IMessage)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.MessageEventArgs" /> class.
            </summary>
            <param name="message">The message<see cref="T:LprServer.IMessage" />.</param>
        </member>
        <member name="P:LprServer.MessageEventArgs.Message">
            <summary>
                Gets the Message.
            </summary>
        </member>
        <member name="T:LprServer.MessageStartEventArgs">
            <summary>
                Defines the <see cref="T:LprServer.MessageStartEventArgs" />.
            </summary>
        </member>
        <member name="M:LprServer.MessageStartEventArgs.#ctor(LprServer.ISession,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.MessageStartEventArgs" /> class.
            </summary>
            <param name="session">The session<see cref="T:LprServer.ISession" />.</param>
            <param name="from">The from address.</param>
        </member>
        <member name="P:LprServer.MessageStartEventArgs.Session">
            <summary>
                Gets the Session.
            </summary>
        </member>
        <member name="P:LprServer.MessageStartEventArgs.From">
            <summary>
                Gets the from address.
            </summary>
        </member>
        <member name="T:LprServer.Parameter">
            <summary>
                Defines the <see cref="T:LprServer.Parameter" />.
            </summary>
        </member>
        <member name="M:LprServer.Parameter.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.Parameter" /> class.
            </summary>
            <param name="name">The name<see cref="T:System.String" />.</param>
            <param name="value">The value<see cref="T:System.String" />.</param>
        </member>
        <member name="P:LprServer.Parameter.Name">
            <summary>
                Gets the Name.
            </summary>
        </member>
        <member name="P:LprServer.Parameter.Value">
            <summary>
                Gets the Value.
            </summary>
        </member>
        <member name="M:LprServer.Parameter.Equals(LprServer.Parameter)">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">The other<see cref="T:LprServer.Parameter" />.</param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LprServer.Parameter.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The obj<see cref="T:System.Object" />.</param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LprServer.Parameter.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                The <see cref="T:System.Int32" />.
            </returns>
        </member>
        <member name="T:LprServer.ParameterParser">
            <summary>
                Defines the <see cref="T:LprServer.ParameterParser" /> which implements parsing of A=1 B=2 type string for command parameters.
            </summary>
        </member>
        <member name="M:LprServer.ParameterParser.#ctor(System.String[])">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.ParameterParser" /> class.
            </summary>
            <param name="arguments">The arguments<see cref="T:System.String" />.</param>
        </member>
        <member name="P:LprServer.ParameterParser.Parameters">
            <summary>
                Gets the parameters which have been parsed from the arguments.
            </summary>
        </member>
        <member name="T:LprServer.ParameterProcessorMap">
            <summary>
                Manages a set of processors which know how to manage the processing of parameter values
                and handles dispatching of parameter values to them when a new command is received.
            </summary>
        </member>
        <member name="M:LprServer.ParameterProcessorMap.GetProcessor(System.String)">
            <summary>
                Gets the processor which is registered for the parameter with the given <paramref name="key" />
                or null if none is found.
            </summary>
            <param name="key">The key<see cref="T:System.String" />.</param>
            <returns>The <see cref="T:LprServer.IParameterProcessor" /> or null.</returns>
        </member>
        <member name="M:LprServer.ParameterProcessorMap.Process(LprServer.IConnection,LprServer.ParameterParser,System.Boolean)">
            <summary>
                Processes a set of parameters using the registered processors.
            </summary>
            <param name="connection">The connection<see cref="T:LprServer.IConnection" />.</param>
            <param name="parameters">The parameters<see cref="T:LprServer.ParameterParser" />.</param>
            <param name="throwOnUnknownParameter">The throwOnUnknownParameter<see cref="T:System.Boolean" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.</returns>
        </member>
        <member name="M:LprServer.ParameterProcessorMap.Process(LprServer.IConnection,System.String[],System.Boolean)">
            <summary>
                Processes a set of parameters using the registered processors.
            </summary>
            <param name="connection">The connection<see cref="T:LprServer.IConnection" />.</param>
            <param name="arguments">The arguments<see cref="T:System.String" />.</param>
            <param name="throwOnUnknownParameter">The throwOnUnknownParameter<see cref="T:System.Boolean" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.</returns>
        </member>
        <member name="M:LprServer.ParameterProcessorMap.SetProcessor(System.String,LprServer.IParameterProcessor)">
            <summary>
                Sets the processor instance which will process the parameter with the given <paramref name="key" />.
            </summary>
            <param name="key">The key<see cref="T:System.String" />.</param>
            <param name="processor">The processor<see cref="T:LprServer.IParameterProcessor" />.</param>
        </member>
        <member name="T:LprServer.RandomIntegerGenerator">
            <summary>
                Defines the <see cref="T:LprServer.RandomIntegerGenerator" />.
            </summary>
        </member>
        <member name="M:LprServer.RandomIntegerGenerator.GenerateRandomInteger(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:LprServer.RecipientAddingEventArgs">
            <summary>
                Defines the <see cref="T:LprServer.RecipientAddingEventArgs" />.
            </summary>
        </member>
        <member name="M:LprServer.RecipientAddingEventArgs.#ctor(LprServer.IMessageBuilder,System.String,LprServer.IConnection)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.RecipientAddingEventArgs" /> class.
            </summary>
            <param name="message">The message<see cref="T:LprServer.IMessage" />.</param>
            <param name="recipient">The recipient being added.</param>
        </member>
        <member name="P:LprServer.RecipientAddingEventArgs.Message">
            <summary>
                Gets the Message.
            </summary>
        </member>
        <member name="P:LprServer.RecipientAddingEventArgs.Recipient">
            <summary>
                Gets the Recipient.
            </summary>
        </member>
        <member name="T:LprServer.ServerOptions">
            <summary>
                Implements a default <see cref="T:LprServer.IServerOptions" /> which is suitable for many basic uses.
            </summary>
            <seealso cref="T:LprServer.IServerOptions" />
        </member>
        <member name="M:LprServer.ServerOptions.#ctor(System.Boolean,System.Boolean,System.String,System.Int32,System.Boolean,System.String[],System.String[],System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.ServerOptions" /> class.
            </summary>
            <param name="allowRemoteConnections">if set to <c>true</c> remote connections to the server are allowed.</param>
            <param name="enableIpV6">If IPV6 dual stack should be enabled</param>
            <param name="domainName">The domain name the server will send in greeting.</param>
            <param name="portNumber">The port number.</param>
            <param name="requireAuthentication"></param>
            <param name="nonSecureAuthMechanismIds">The identifier of AUTH mechanisms that will be allowed for insecure connections.</param>
            <param name="secureAuthMechanismNamesIds">The identifier of AUTH mechanisms that will be allowed for secure connections.</param>
            <param name="implcitTlsCertificate">The TLS certificate to use for implicit TLS.</param>
            <param name="startTlsCertificate">The TLS certificate to use for STARTTLS.</param>
        </member>
        <member name="P:LprServer.ServerOptions.DomainName">
            <inheritdoc />
        </member>
        <member name="P:LprServer.ServerOptions.IpAddress">
            <inheritdoc />
        </member>
        <member name="P:LprServer.ServerOptions.MaximumNumberOfSequentialBadCommands">
            <inheritdoc />
        </member>
        <member name="P:LprServer.ServerOptions.PortNumber">
            <inheritdoc />
        </member>
        <member name="P:LprServer.ServerOptions.FallbackEncoding">
            <inheritdoc />
        </member>
        <member name="M:LprServer.ServerOptions.GetExtensions(LprServer.IConnectionChannel)">
            <inheritdoc />
        </member>
        <member name="M:LprServer.ServerOptions.GetMaximumMessageSize(LprServer.IConnection)">
            <inheritdoc />
        </member>
        <member name="M:LprServer.ServerOptions.GetReceiveTimeout(LprServer.IConnectionChannel)">
            <inheritdoc />
        </member>
        <member name="M:LprServer.ServerOptions.GetSendTimeout(LprServer.IConnectionChannel)">
            <inheritdoc />
        </member>
        <member name="M:LprServer.ServerOptions.GetSSLCertificate(LprServer.IConnection)">
            <inheritdoc />
        </member>
        <member name="M:LprServer.ServerOptions.IsAuthMechanismEnabled(LprServer.IConnection,LprServer.Extensions.Auth.IAuthMechanism)">
            <inheritdoc />
        </member>
        <member name="M:LprServer.ServerOptions.IsSessionLoggingEnabled(LprServer.IConnection)">
            <inheritdoc />
        </member>
        <member name="M:LprServer.ServerOptions.IsSSLEnabled(LprServer.IConnection)">
            <inheritdoc />
        </member>
        <member name="M:LprServer.ServerOptions.OnCommandReceived(LprServer.IConnection,LprServer.SmtpCommand)">
            <inheritdoc />
        </member>
        <member name="M:LprServer.ServerOptions.OnCreateNewMessage(LprServer.IConnection)">
            <inheritdoc />
        </member>
        <member name="M:LprServer.ServerOptions.OnCreateNewSession(LprServer.IConnectionChannel)">
            <inheritdoc />
        </member>
        <member name="M:LprServer.ServerOptions.OnMessageCompleted(LprServer.IConnection)">
            <inheritdoc />
        </member>
        <member name="M:LprServer.ServerOptions.OnMessageReceived(LprServer.IConnection,LprServer.IMessage)">
            <inheritdoc />
        </member>
        <member name="M:LprServer.ServerOptions.OnMessageRecipientAdding(LprServer.IConnection,LprServer.IMessageBuilder,System.String)">
            <inheritdoc />
        </member>
        <member name="M:LprServer.ServerOptions.OnMessageStart(LprServer.IConnection,System.String)">
            <inheritdoc />
        </member>
        <member name="M:LprServer.ServerOptions.OnSessionCompleted(LprServer.IConnection,LprServer.ISession)">
            <inheritdoc />
        </member>
        <member name="M:LprServer.ServerOptions.OnSessionStarted(LprServer.IConnection,LprServer.ISession)">
            <inheritdoc />
        </member>
        <member name="M:LprServer.ServerOptions.ValidateAuthenticationCredentials(LprServer.IConnection,LprServer.Extensions.Auth.IAuthenticationCredentials)">
            <inheritdoc />
        </member>
        <member name="E:LprServer.ServerOptions.AuthenticationCredentialsValidationRequiredEventHandler">
            <summary>
                Occurs when authentication credential provided by the client need to be validated.
            </summary>
        </member>
        <member name="E:LprServer.ServerOptions.CommandReceivedEventHandler">
            <summary>
                Occurs when a command is received from a client.
            </summary>
        </member>
        <member name="E:LprServer.ServerOptions.MessageRecipientAddingEventHandler">
            <summary>
                Occurs when a message has been requested for a message.
            </summary>
        </member>
        <member name="E:LprServer.ServerOptions.MessageCompletedEventHandler">
            <summary>
                Occurs when a message is received but not yet committed.
            </summary>
        </member>
        <member name="E:LprServer.ServerOptions.MessageReceivedEventHandler">
            <summary>
                Occurs when a message is received and committed.
            </summary>
        </member>
        <member name="E:LprServer.ServerOptions.SessionCompletedEventHandler">
            <summary>
                Occurs when a client session is closed.
            </summary>
        </member>
        <member name="E:LprServer.ServerOptions.SessionStartedEventHandler">
            <summary>
                Occurs when a new session is created, when a client connects to the server.
            </summary>
        </member>
        <member name="E:LprServer.ServerOptions.MessageStartEventHandler">
            <summary>
                Occurs when a new message is started.
            </summary>
        </member>
        <member name="T:LprServer.ServerStopOptions">
            <summary>
                Defines the ServerStopOptions.
            </summary>
        </member>
        <member name="F:LprServer.ServerStopOptions.WaitForExistingConnections">
            <summary>
                Defines the WaitForExistingConnections
            </summary>
        </member>
        <member name="F:LprServer.ServerStopOptions.KillExistingConnections">
            <summary>
                Defines the KillExistingConnections
            </summary>
        </member>
        <member name="T:LprServer.SessionErrorType">
            <summary>
                A high level classification of common session termination errors.
            </summary>
        </member>
        <member name="F:LprServer.SessionErrorType.None">
            <summary>
                Indicates that there was no error.
            </summary>
        </member>
        <member name="F:LprServer.SessionErrorType.NetworkError">
            <summary>
                Indicates a network/IO error such as connection timeout or aborted connection.
            </summary>
        </member>
        <member name="F:LprServer.SessionErrorType.UnexpectedException">
            <summary>
                Indicates an unhandled exception in the server or an extension which caused the connection to be terminated.
            </summary>
        </member>
        <member name="F:LprServer.SessionErrorType.ServerShutdown">
            <summary>
                Indicates the connection was terminated because the server was shut down.
            </summary>
        </member>
        <member name="T:LprServer.SessionEventArgs">
            <summary>
                Defines the <see cref="T:LprServer.SessionEventArgs" />.
            </summary>
        </member>
        <member name="M:LprServer.SessionEventArgs.#ctor(LprServer.ISession)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.SessionEventArgs" /> class.
            </summary>
            <param name="session">The session<see cref="T:LprServer.ISession" />.</param>
        </member>
        <member name="P:LprServer.SessionEventArgs.Session">
            <summary>
                Gets the Session.
            </summary>
        </member>
        <member name="T:LprServer.SmtpCommand">
            <summary>
                Defines the <see cref="T:LprServer.SmtpCommand" /> which implements parsing of an LPR command received from client to server.
            </summary>
        </member>
        <member name="M:LprServer.SmtpCommand.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.SmtpCommand" /> class.
            </summary>
            <param name="text">The text<see cref="T:System.String" />.</param>
        </member>
        <member name="P:LprServer.SmtpCommand.ArgumentsText">
            <summary>
                Gets the arguments supplied after the VERB in the command as a single string.
            </summary>
        </member>
        <member name="P:LprServer.SmtpCommand.IsEmpty">
            <summary>
                Gets a value indicating whether IsEmpty.
            </summary>
        </member>
        <member name="P:LprServer.SmtpCommand.IsValid">
            <summary>
                Gets a value indicating whether this command is valid - i.e. matching the pattern allowed.
            </summary>
        </member>
        <member name="P:LprServer.SmtpCommand.Text">
            <summary>
                Gets the Text.
            </summary>
        </member>
        <member name="P:LprServer.SmtpCommand.Verb">
            <summary>
                Gets the Verb.
            </summary>
        </member>
        <member name="M:LprServer.SmtpCommand.Equals(LprServer.SmtpCommand)">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">The other<see cref="T:LprServer.SmtpCommand" />.</param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LprServer.SmtpCommand.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The obj<see cref="T:System.Object" />.</param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:LprServer.SmtpCommand.ToString">
            <summary>Converts to string.</summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:LprServer.SmtpCommand.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                The <see cref="T:System.Int32" />.
            </returns>
        </member>
        <member name="T:LprServer.SmtpResponse">
            <summary>
                Represents a LPR response from server to client which is represented by a numeric code an optional descriptive
                text.
            </summary>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="M:LprServer.SmtpResponse.#ctor(System.Int32,System.String,System.Object[])">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.SmtpResponse" /> class using any code represented as a number.
            </summary>
            <param name="code">The code.</param>
            <param name="messageFormatString">
                The message format string. Including placeholders where <paramref name="args" /> will
                be substituted in.
            </param>
            <param name="args">The arguments used to fill in placeholders in <paramref name="messageFormatString" />.</param>
        </member>
        <member name="M:LprServer.SmtpResponse.#ctor(LprServer.StandardSmtpResponseCode,System.String,System.Object[])">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.SmtpResponse" /> class using an enum of standard responses.
            </summary>
            <param name="code">The code.</param>
            <param name="messageFormatString">The message format string.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="P:LprServer.SmtpResponse.Code">
            <summary>
                Gets the Code.
            </summary>
        </member>
        <member name="P:LprServer.SmtpResponse.IsError">
            <summary>
                Gets a value indicating whether this response represents an error.
                Error responses have a <see cref="P:LprServer.SmtpResponse.Code" /> in the range 500-599.
            </summary>
        </member>
        <member name="P:LprServer.SmtpResponse.IsSuccess">
            <summary>
                Gets a value indicating whether this response represent success.
                Successful responses have a <see cref="P:LprServer.SmtpResponse.Code" /> in the range 200-299.
            </summary>
        </member>
        <member name="P:LprServer.SmtpResponse.Message">
            <summary>
                Gets the Message.
            </summary>
        </member>
        <member name="M:LprServer.SmtpResponse.Equals(LprServer.SmtpResponse)">
            <summary>
                Indicates whether the current response is equal to another. Both message and code must be equal.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
                true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:LprServer.SmtpResponse.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
                Objects are equal if they are both instances of <see cref="T:LprServer.SmtpResponse" /> and  have the same <see cref="P:LprServer.SmtpResponse.Code" />
                and <see cref="P:LprServer.SmtpResponse.Message" />.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:LprServer.SmtpResponse.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:LprServer.SmtpResponse.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents the response.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents the response.</returns>
        </member>
        <member name="T:LprServer.SmtpServer">
            <summary>
                Defines the <see cref="T:LprServer.SmtpServer" />.
            </summary>
        </member>
        <member name="F:LprServer.SmtpServer.activeConnections">
            <summary>
                Defines the activeConnections.
            </summary>
        </member>
        <member name="F:LprServer.SmtpServer.logger">
            <summary>
                Defines the logger.
            </summary>
        </member>
        <member name="F:LprServer.SmtpServer.nextConnectionEvent">
            <summary>
                Defines the nextConnectionEvent.
            </summary>
        </member>
        <member name="F:LprServer.SmtpServer.coreTask">
            <summary>
                Defines the coreTask.
            </summary>
        </member>
        <member name="F:LprServer.SmtpServer.disposedValue">
            <summary>
                Defines the disposedValue.
            </summary>
        </member>
        <member name="F:LprServer.SmtpServer.isRunning">
            <summary>
                Defines the isRunning.
            </summary>
        </member>
        <member name="F:LprServer.SmtpServer.listeners">
            <summary>
                Defines the listener.
            </summary>
        </member>
        <member name="M:LprServer.SmtpServer.#ctor(LprServer.IServerOptions)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.SmtpServer" /> class.
            </summary>
            <param name="options">The Options<see cref="T:LprServer.IServerOptions" />.</param>
        </member>
        <member name="P:LprServer.SmtpServer.ActiveConnections">
            <summary>
                Gets the ActiveConnections.
            </summary>
            <remarks>Note: this is not thread-safe for enumeration.</remarks>
        </member>
        <member name="P:LprServer.SmtpServer.IsRunning">
            <summary>
                Gets a value indicating whether IsRunning
                Gets or sets a value indicating whether the server is currently running.
            </summary>
        </member>
        <member name="P:LprServer.SmtpServer.Options">
            <summary>
                Gets the Options.
            </summary>
        </member>
        <member name="E:LprServer.SmtpServer.AuthenticationCredentialsValidationRequiredEventHandler">
            <summary>
                Occurs when authentication results need to be validated.
            </summary>
        </member>
        <member name="E:LprServer.SmtpServer.MessageCompletedEventHandler">
            <summary>
                Occurs when a message has been fully received but not yet acknowledged by the server.
            </summary>
        </member>
        <member name="E:LprServer.SmtpServer.MessageReceivedEventHandler">
            <summary>
                Occurs when a message has been received and acknowledged by the server.
            </summary>
        </member>
        <member name="E:LprServer.SmtpServer.SessionCompletedEventHandler">
            <summary>
                Occurs when a session is terminated.
            </summary>
        </member>
        <member name="E:LprServer.SmtpServer.SessionStartedHandler">
            <summary>
                Occurs when a new session is started, when a new client connects to the server.
            </summary>
        </member>
        <member name="M:LprServer.SmtpServer.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="E:LprServer.SmtpServer.IsRunningChanged">
            <summary>
                Defines the IsRunningChanged
            </summary>
        </member>
        <member name="M:LprServer.SmtpServer.KillConnections">
            <summary>
                Kills all client connections.
            </summary>
        </member>
        <member name="M:LprServer.SmtpServer.Start">
            <summary>
                Runs the server asynchronously. This method returns once the server has been started.
                To stop the server call the <see cref="M:LprServer.SmtpServer.Stop" /> method.
            </summary>
        </member>
        <member name="M:LprServer.SmtpServer.Stop">
            <summary>
                Stops the running server. Any existing connections are terminated.
            </summary>
        </member>
        <member name="M:LprServer.SmtpServer.Stop(System.Boolean)">
            <summary>
                Stops the running server.
                This method blocks until all connections have terminated, either by normal completion or timeout,
                or if <paramref name="killConnections" /> has been specified then once all of the threads
                have been killed.
            </summary>
            <param name="killConnections">True if existing connections should be terminated.</param>
        </member>
        <member name="M:LprServer.SmtpServer.WaitForNextConnection">
            <summary>
                Waits for the next client to connect and blocks until then.
            </summary>
        </member>
        <member name="M:LprServer.SmtpServer.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">The disposing<see cref="T:System.Boolean" />.</param>
        </member>
        <member name="M:LprServer.SmtpServer.CreateVerbMap">
            <summary>
                Creates the verb map which represent the commands implemented by the server.
            </summary>
            <returns>The <see cref="T:LprServer.Verbs.IVerbMap" /> with registered verbs for the commands.</returns>
        </member>
        <member name="T:LprServer.SmtpServerException">
            <summary>
                Defines the <see cref="T:LprServer.SmtpServerException" />.
            </summary>
        </member>
        <member name="M:LprServer.SmtpServerException.#ctor(LprServer.SmtpResponse)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.SmtpServerException" /> class.
            </summary>
            <param name="smtpResponse">The smtpResponse<see cref="P:LprServer.SmtpServerException.SmtpResponse" />.</param>
        </member>
        <member name="M:LprServer.SmtpServerException.#ctor(LprServer.SmtpResponse,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.SmtpServerException" /> class.
            </summary>
            <param name="smtpResponse">The smtpResponse<see cref="P:LprServer.SmtpServerException.SmtpResponse" />.</param>
            <param name="innerException">The innerException<see cref="T:System.Exception" />.</param>
        </member>
        <member name="M:LprServer.SmtpServerException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.SmtpServerException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
                The exception that is the cause of the current exception, or a null reference (Nothing in
                Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="M:LprServer.SmtpServerException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.SmtpServerException" /> class.
            </summary>
        </member>
        <member name="M:LprServer.SmtpServerException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.SmtpServerException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="P:LprServer.SmtpServerException.SmtpResponse">
            <summary>
                Gets the SmtpResponse.
            </summary>
        </member>
        <member name="T:LprServer.SmtpStreamReader">
            <summary>A stream writer which uses the correct \r\n line ending required for LPR protocol.</summary>
        </member>
        <member name="M:LprServer.SmtpStreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:LprServer.SmtpStreamReader" /> class.</summary>
            <param name="stream">The stream to write to.</param>
            <param name="fallbackEncoding">The character encoding to use to fallback to should a line not be decodable as UTF8.</param>
            <param name="leaveOpen">True if stream should be left open when the reader is disposed.</param>
        </member>
        <member name="M:LprServer.SmtpStreamReader.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:LprServer.SmtpStreamReader.ReadLineBytesAsync(System.Threading.CancellationToken)">
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:LprServer.SmtpStreamReader.ReadLineAsync(System.Threading.CancellationToken)">
            <summary>
                Reads the a line from the stream which is terminated with a \n. The string will be decoded using UTF8 and
                falling back to the provided encoding if decoding fails.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:LprServer.SmtpStreamReader.Dispose(System.Boolean)">
            <summary>Releases unmanaged and - optionally - managed resources.</summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:LprServer.SmtpStreamWriter">
            <summary>A stream writer which uses the correct \r\n line ending required for LPR protocol.</summary>
        </member>
        <member name="M:LprServer.SmtpStreamWriter.#ctor(System.IO.Stream,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:LprServer.SmtpStreamWriter" /> class.</summary>
            <param name="stream">The stream to write to.</param>
            <param name="leaveOpen">True if stream should be closed when the writer is disposed.</param>
        </member>
        <member name="T:LprServer.SmtpStringBuilder">
            <summary>Builds a multi line string where each line has the CRLF terminator required for LPR.</summary>
        </member>
        <member name="M:LprServer.SmtpStringBuilder.AppendLine(System.String)">
            <summary>Appends a line to the string and terminates it with the correct CRLF required for LPR.</summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:LprServer.SmtpStringBuilder.ToString">
            <summary>  Returns the complete string including all lines which have been appended separated with the correct CRLF.</summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:LprServer.StandardSmtpPort">
            <summary>
                Enumeration of the different standard TCP ports that the server can listen on.
            </summary>
        </member>
        <member name="F:LprServer.StandardSmtpPort.AssignAutomatically">
            <summary>
                Select a free port number automatically
            </summary>
        </member>
        <member name="F:LprServer.StandardSmtpPort.LPR">
            <summary>
                Use the standard IANA LPR port - 25
            </summary>
        </member>
        <member name="F:LprServer.StandardSmtpPort.LPROverSSL">
            <summary>
                Use the standard IANA LPR-over-SSL port - 465
            </summary>
        </member>
        <member name="T:LprServer.StandardSmtpResponseCode">
            <summary>
                Defines the StandardSmtpResponseCode.
            </summary>
        </member>
        <member name="F:LprServer.StandardSmtpResponseCode.SyntaxErrorCommandUnrecognised">
            <summary>
                Defines the SyntaxErrorCommandUnrecognised
            </summary>
        </member>
        <member name="F:LprServer.StandardSmtpResponseCode.SyntaxErrorInCommandArguments">
            <summary>
                Defines the SyntaxErrorInCommandArguments
            </summary>
        </member>
        <member name="F:LprServer.StandardSmtpResponseCode.CommandNotImplemented">
            <summary>
                Defines the CommandNotImplemented
            </summary>
        </member>
        <member name="F:LprServer.StandardSmtpResponseCode.BadSequenceOfCommands">
            <summary>
                Defines the BadSequenceOfCommands
            </summary>
        </member>
        <member name="F:LprServer.StandardSmtpResponseCode.CommandParameterNotImplemented">
            <summary>
                Defines the CommandParameterNotImplemented
            </summary>
        </member>
        <member name="F:LprServer.StandardSmtpResponseCode.ExceededStorageAllocation">
            <summary>
                Defines the ExceededStorageAllocation
            </summary>
        </member>
        <member name="F:LprServer.StandardSmtpResponseCode.AuthenticationFailure">
            <summary>
                Defines the AuthenticationFailure
            </summary>
        </member>
        <member name="F:LprServer.StandardSmtpResponseCode.AuthenticationRequired">
            <summary>
                Defines the AuthenticationRequired
            </summary>
        </member>
        <member name="F:LprServer.StandardSmtpResponseCode.RecipientRejected">
            <summary>
                Defines the RecipientRejected
            </summary>
        </member>
        <member name="F:LprServer.StandardSmtpResponseCode.TransactionFailed">
            <summary>
                Defines the TransactionFailed
            </summary>
        </member>
        <member name="F:LprServer.StandardSmtpResponseCode.SystemStatusOrHelpReply">
            <summary>
                Defines the SystemStatusOrHelpReply
            </summary>
        </member>
        <member name="F:LprServer.StandardSmtpResponseCode.HelpMessage">
            <summary>
                Defines the HelpMessage
            </summary>
        </member>
        <member name="F:LprServer.StandardSmtpResponseCode.ServiceReady">
            <summary>
                Defines the ServiceReady
            </summary>
        </member>
        <member name="F:LprServer.StandardSmtpResponseCode.ClosingTransmissionChannel">
            <summary>
                Defines the ClosingTransmissionChannel
            </summary>
        </member>
        <member name="F:LprServer.StandardSmtpResponseCode.OK">
            <summary>
                Defines the OK
            </summary>
        </member>
        <member name="F:LprServer.StandardSmtpResponseCode.UserNotLocalWillForwardTo">
            <summary>
                Defines the UserNotLocalWillForwardTo
            </summary>
        </member>
        <member name="F:LprServer.StandardSmtpResponseCode.StartMailInputEndWithDot">
            <summary>
                Defines the StartMailInputEndWithDot
            </summary>
        </member>
        <member name="F:LprServer.StandardSmtpResponseCode.AuthenticationContinue">
            <summary>
                Defines the AuthenticationContinue
            </summary>
        </member>
        <member name="F:LprServer.StandardSmtpResponseCode.AuthenticationOK">
            <summary>
                Defines the AuthenticationOK
            </summary>
        </member>
        <member name="T:LprServer.TcpClientConnectionChannel">
            <summary>
                Defines the <see cref="T:LprServer.TcpClientConnectionChannel" />.
            </summary>
        </member>
        <member name="M:LprServer.TcpClientConnectionChannel.#ctor(System.Net.Sockets.TcpClient,System.Text.Encoding)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.TcpClientConnectionChannel" /> class.
            </summary>
            <param name="tcpClient">The tcpClient<see cref="T:System.Net.Sockets.TcpClient" />.</param>
            <param name="fallbackEncoding">The encoding to fallback to if bytes received cannot be decoded as UTF-8.</param>
        </member>
        <member name="E:LprServer.TcpClientConnectionChannel.ClosedEventHandler">
            <summary>
                Defines the Closed
            </summary>
        </member>
        <member name="P:LprServer.TcpClientConnectionChannel.ClientIPAddress">
            <summary>
                Gets the ClientIPAddress.
            </summary>
        </member>
        <member name="P:LprServer.TcpClientConnectionChannel.IsConnected">
            <summary>
                Gets a value indicating whether IsConnected.
            </summary>
        </member>
        <member name="P:LprServer.TcpClientConnectionChannel.ReceiveTimeout">
            <summary>
                Gets or sets the ReceiveTimeout.
            </summary>
        </member>
        <member name="P:LprServer.TcpClientConnectionChannel.SendTimeout">
            <summary>
                Gets or sets the SendTimeout.
            </summary>
        </member>
        <member name="M:LprServer.TcpClientConnectionChannel.ApplyStreamFilter(System.Func{System.IO.Stream,System.Threading.Tasks.Task{System.IO.Stream}})">
            <summary>
                Applies the a filter to the stream which is used to read data from the channel.
            </summary>
            <param name="filter">The filter.</param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.
            </returns>
        </member>
        <member name="M:LprServer.TcpClientConnectionChannel.Close">
            <summary>
                Closes the channel and notifies users via the <see cref="E:LprServer.TcpClientConnectionChannel.ClosedEventHandler" /> event.
            </summary>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.
            </returns>
        </member>
        <member name="M:LprServer.TcpClientConnectionChannel.Flush">
            <summary>
                Flushes outgoing data.
            </summary>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.
            </returns>
        </member>
        <member name="M:LprServer.TcpClientConnectionChannel.ReadLine">
            <summary>
                Reads the next line from the channel.
            </summary>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.
            </returns>
            <exception cref="T:System.IO.IOException">Reader returned null string.</exception>
            <exception cref="T:LprServer.ConnectionUnexpectedlyClosedException">Read failed.</exception>
        </member>
        <member name="M:LprServer.TcpClientConnectionChannel.WriteLine(System.String)">
            <inheritdoc />
        </member>
        <member name="M:LprServer.TcpClientConnectionChannel.ReadLineBytes">
            <inheritdoc />
        </member>
        <member name="M:LprServer.TcpClientConnectionChannel.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:LprServer.TcpClientConnectionChannel.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="T:LprServer.DataVerb">
            <summary>
                Defines the <see cref="T:LprServer.DataVerb" />.
            </summary>
        </member>
        <member name="M:LprServer.DataVerb.Process(LprServer.IConnection,LprServer.SmtpCommand)">
            <inheritdoc />
        </member>
        <member name="M:LprServer.DataVerb.ProcessLine(System.Byte[])">
            <summary>
                Processes a line of data from the client removing the escaping of the special end of message character.
            </summary>
            <param name="data">The line.</param>
            <returns>The line of data without escaping of the . character.</returns>
        </member>
        <member name="T:LprServer.EhloVerb">
            <summary>
                Defines the <see cref="T:LprServer.EhloVerb" />.
            </summary>
        </member>
        <member name="M:LprServer.EhloVerb.Process(LprServer.IConnection,LprServer.SmtpCommand)">
            <inheritdoc />
        </member>
        <member name="T:LprServer.HeloVerb">
            <summary>
                Defines the <see cref="T:LprServer.HeloVerb" />.
            </summary>
        </member>
        <member name="M:LprServer.HeloVerb.Process(LprServer.IConnection,LprServer.SmtpCommand)">
            <inheritdoc />
        </member>
        <member name="T:LprServer.Verbs.IVerb">
            <summary>
                Defines the <see cref="T:LprServer.Verbs.IVerb" />.
            </summary>
        </member>
        <member name="M:LprServer.Verbs.IVerb.Process(LprServer.IConnection,LprServer.SmtpCommand)">
            <summary>
                Processes a command which math.
            </summary>
            <param name="connection">The connection<see cref="T:LprServer.IConnection" />.</param>
            <param name="command">The command<see cref="T:LprServer.SmtpCommand" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation.</returns>
        </member>
        <member name="T:LprServer.Verbs.IVerbMap">
            <summary>
                Defines the <see cref="T:LprServer.Verbs.IVerbMap" />.
            </summary>
        </member>
        <member name="M:LprServer.Verbs.IVerbMap.GetVerbProcessor(System.String)">
            <summary>
                Gets the verb processor which is registered for the specified verb.
            </summary>
            <param name="verb">The verb.</param>
            <returns>The verb or null.</returns>
        </member>
        <member name="M:LprServer.Verbs.IVerbMap.SetVerbProcessor(System.String,LprServer.Verbs.IVerb)">
            <summary>
                Sets the verb processor which is registered for a verb.
            </summary>
            <param name="verb">The verb<see cref="T:System.String" />.</param>
            <param name="verbProcessor">The verbProcessor<see cref="T:LprServer.Verbs.IVerb" />.</param>
        </member>
        <member name="T:LprServer.Verbs.NoopVerb">
            <summary>
                Defines the <see cref="T:LprServer.Verbs.NoopVerb" />.
            </summary>
        </member>
        <member name="M:LprServer.Verbs.NoopVerb.Process(LprServer.IConnection,LprServer.SmtpCommand)">
            <inheritdoc />
        </member>
        <member name="T:LprServer.Verbs.RsetVerb">
            <summary>
                Defines the <see cref="T:LprServer.Verbs.RsetVerb" />.
            </summary>
        </member>
        <member name="M:LprServer.Verbs.RsetVerb.Process(LprServer.IConnection,LprServer.SmtpCommand)">
            <inheritdoc />
        </member>
        <member name="T:LprServer.Verbs.VerbMap">
            <summary>
                Defines the <see cref="T:LprServer.Verbs.VerbMap" />.
            </summary>
        </member>
        <member name="M:LprServer.Verbs.VerbMap.GetVerbProcessor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:LprServer.Verbs.VerbMap.SetVerbProcessor(System.String,LprServer.Verbs.IVerb)">
            <inheritdoc />
        </member>
        <member name="T:LprServer.Verbs.VerbWithSubCommands">
            <summary>
                Defines the <see cref="T:LprServer.Verbs.VerbWithSubCommands" />.
            </summary>
        </member>
        <member name="M:LprServer.Verbs.VerbWithSubCommands.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.Verbs.VerbWithSubCommands" /> class.
            </summary>
        </member>
        <member name="M:LprServer.Verbs.VerbWithSubCommands.#ctor(LprServer.Verbs.IVerbMap)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.Verbs.VerbWithSubCommands" /> class.
            </summary>
            <param name="subVerbMap">The subVerbMap<see cref="T:LprServer.Verbs.IVerbMap" />.</param>
        </member>
        <member name="P:LprServer.Verbs.VerbWithSubCommands.SubVerbMap">
            <summary>
                Gets the SubVerbMap.
            </summary>
        </member>
        <member name="M:LprServer.Verbs.VerbWithSubCommands.Process(LprServer.IConnection,LprServer.SmtpCommand)">
            <summary>
                Dispatches a command to the registered sub command matching the next verb in the command
                or writes an error to the client is no match was found.
            </summary>
            <param name="connection">The connection<see cref="T:LprServer.IConnection" />.</param>
            <param name="command">The command<see cref="T:LprServer.SmtpCommand" />.</param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> representing the async operation.
            </returns>
        </member>
        <member name="T:LprServer.MailFromVerb">
            <summary>
                Defines the <see cref="T:LprServer.MailFromVerb" />.
            </summary>
        </member>
        <member name="F:LprServer.MailFromVerb.currentDateTimeProvider">
            <summary>
                Defines the currentDateTimeProvider.
            </summary>
        </member>
        <member name="M:LprServer.MailFromVerb.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.MailFromVerb" /> class.
            </summary>
        </member>
        <member name="M:LprServer.MailFromVerb.#ctor(LprServer.ICurrentDateTimeProvider)">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.MailFromVerb" /> class.
            </summary>
            <param name="currentDateTimeProvider">The currentDateTimeProvider<see cref="T:LprServer.ICurrentDateTimeProvider" />.</param>
        </member>
        <member name="P:LprServer.MailFromVerb.ParameterProcessorMap">
            <summary>
                Gets the ParameterProcessorMap.
            </summary>
        </member>
        <member name="M:LprServer.MailFromVerb.Process(LprServer.IConnection,LprServer.SmtpCommand)">
            <inheritdoc />
        </member>
        <member name="T:LprServer.MailVerb">
            <summary>
                Defines the <see cref="T:LprServer.MailVerb" />.
            </summary>
        </member>
        <member name="M:LprServer.MailVerb.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.MailVerb" /> class.
            </summary>
        </member>
        <member name="P:LprServer.MailVerb.FromSubVerb">
            <summary>
                Gets the FromSubVerb.
            </summary>
        </member>
        <member name="P:LprServer.MailVerb.SubVerbMap">
            <summary>
                Gets the SubVerbMap.
            </summary>
        </member>
        <member name="M:LprServer.MailVerb.Process(LprServer.IConnection,LprServer.SmtpCommand)">
            <inheritdoc />
        </member>
        <member name="T:LprServer.QuitVerb">
            <summary>
                Defines the <see cref="T:LprServer.QuitVerb" />.
            </summary>
        </member>
        <member name="M:LprServer.QuitVerb.Process(LprServer.IConnection,LprServer.SmtpCommand)">
            <inheritdoc />
        </member>
        <member name="T:LprServer.RcptToVerb">
            <summary>
                Defines the <see cref="T:LprServer.RcptToVerb" />.
            </summary>
        </member>
        <member name="M:LprServer.RcptToVerb.Process(LprServer.IConnection,LprServer.SmtpCommand)">
            <inheritdoc />
        </member>
        <member name="T:LprServer.RcptVerb">
            <summary>
                Defines the <see cref="T:LprServer.RcptVerb" />.
            </summary>
        </member>
        <member name="M:LprServer.RcptVerb.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:LprServer.RcptVerb" /> class.
            </summary>
        </member>
        <member name="P:LprServer.RcptVerb.SubVerbMap">
            <summary>
                Gets the <see cref="T:LprServer.Verbs.VerbMap" /> for subcommands.
            </summary>
        </member>
        <member name="M:LprServer.RcptVerb.Process(LprServer.IConnection,LprServer.SmtpCommand)">
            <inheritdoc />
        </member>
    </members>
</doc>
